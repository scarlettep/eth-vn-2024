/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace QuadraticAuction {
  export type BidAuctionInfoStruct = {
    auctionId: BigNumberish;
    harvestAddress: AddressLike;
    harvestFlag: boolean;
  };

  export type BidAuctionInfoStructOutput = [
    auctionId: bigint,
    harvestAddress: string,
    harvestFlag: boolean
  ] & { auctionId: bigint; harvestAddress: string; harvestFlag: boolean };
}

export interface QuadraticAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PAUSER_ROLE"
      | "_governance"
      | "abortiveAuction"
      | "auctionInfos"
      | "auctionRecords"
      | "borrowCompound"
      | "changeUniswapV3Oracle"
      | "doAuction"
      | "doHarvestAuction"
      | "doInitialize"
      | "funder"
      | "funderClaim"
      | "funderPoolInterest"
      | "getAuctionRecordLength"
      | "getAuctioningIds"
      | "getBidAuctioningIds"
      | "getCurrSaleInfo"
      | "getCurrSaleInfoV2"
      | "getHarvestAuction"
      | "getHarvestAuctionV2"
      | "getHolderAuctionIds"
      | "getUserBidAuctioningIds"
      | "getUserBidAuctioningInfos"
      | "grantRole"
      | "hasRole"
      | "onePriceRatio"
      | "pause"
      | "paused"
      | "quadraticLiquidation"
      | "reductionRatio"
      | "reductionTime"
      | "revokeRole"
      | "riskFactor"
      | "setActionConfig"
      | "setFunder"
      | "setGovernance"
      | "setQuadraticLiquidation"
      | "setStreamingProcessor"
      | "streamingProcessor"
      | "toAuction"
      | "uniswapV3Oracle"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AbortiveAuctionEvent"
      | "ChangeUniswapV3OracleEvent"
      | "DoAuctionEvent"
      | "DoHarvestAuctionEvent"
      | "FunderClaimEvent"
      | "GovernanceTransferred"
      | "Initialized"
      | "Paused"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetActionConfigEvent"
      | "SetFunderEvent"
      | "SetQuadraticLiquidationEvent"
      | "SetStreamingProcessorEvent"
      | "ToAuctionEvent"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "abortiveAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionRecords",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCompound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeUniswapV3Oracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doHarvestAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doInitialize",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "funder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "funderClaim",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "funderPoolInterest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionRecordLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctioningIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBidAuctioningIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrSaleInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrSaleInfoV2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestAuctionV2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHolderAuctionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBidAuctioningIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBidAuctioningInfos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onePriceRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quadraticLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reductionRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reductionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "riskFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActionConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuadraticLiquidation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreamingProcessor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "streamingProcessor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toAuction",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Oracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "abortiveAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeUniswapV3Oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doHarvestAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "funderClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "funderPoolInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionRecordLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctioningIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidAuctioningIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrSaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrSaleInfoV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestAuctionV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHolderAuctionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBidAuctioningIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBidAuctioningInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onePriceRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quadraticLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reductionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reductionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskFactor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setActionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFunder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuadraticLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStreamingProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamingProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AbortiveAuctionEventEvent {
  export type InputTuple = [auctionId: BigNumberish, toAddress: AddressLike];
  export type OutputTuple = [auctionId: bigint, toAddress: string];
  export interface OutputObject {
    auctionId: bigint;
    toAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeUniswapV3OracleEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    beforeVal: AddressLike,
    afterVal: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    beforeVal: string,
    afterVal: string
  ];
  export interface OutputObject {
    sender: string;
    beforeVal: string;
    afterVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoAuctionEventEvent {
  export type InputTuple = [
    bid: BigNumberish,
    tokenId: BigNumberish,
    auctionId: BigNumberish,
    auctionAmount: BigNumberish,
    userAddr: AddressLike
  ];
  export type OutputTuple = [
    bid: bigint,
    tokenId: bigint,
    auctionId: bigint,
    auctionAmount: bigint,
    userAddr: string
  ];
  export interface OutputObject {
    bid: bigint;
    tokenId: bigint;
    auctionId: bigint;
    auctionAmount: bigint;
    userAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoHarvestAuctionEventEvent {
  export type InputTuple = [
    bid: BigNumberish,
    tokenId: BigNumberish,
    auctionId: BigNumberish,
    userAddr: AddressLike,
    bidArid: BigNumberish,
    bidAmount: BigNumberish,
    totalBidAmount: BigNumberish
  ];
  export type OutputTuple = [
    bid: bigint,
    tokenId: bigint,
    auctionId: bigint,
    userAddr: string,
    bidArid: bigint,
    bidAmount: bigint,
    totalBidAmount: bigint
  ];
  export interface OutputObject {
    bid: bigint;
    tokenId: bigint;
    auctionId: bigint;
    userAddr: string;
    bidArid: bigint;
    bidAmount: bigint;
    totalBidAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunderClaimEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, token: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetActionConfigEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    reductionRatio: BigNumberish,
    reductionTime: BigNumberish,
    riskFactor: BigNumberish,
    onePriceRatio: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    reductionRatio: bigint,
    reductionTime: bigint,
    riskFactor: bigint,
    onePriceRatio: bigint
  ];
  export interface OutputObject {
    sender: string;
    reductionRatio: bigint;
    reductionTime: bigint;
    riskFactor: bigint;
    onePriceRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFunderEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    beforeVal: AddressLike,
    afterVal: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    beforeVal: string,
    afterVal: string
  ];
  export interface OutputObject {
    sender: string;
    beforeVal: string;
    afterVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetQuadraticLiquidationEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    quadraticLiquidation: AddressLike
  ];
  export type OutputTuple = [sender: string, quadraticLiquidation: string];
  export interface OutputObject {
    sender: string;
    quadraticLiquidation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetStreamingProcessorEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    beforeVal: AddressLike,
    afterVal: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    beforeVal: string,
    afterVal: string
  ];
  export interface OutputObject {
    sender: string;
    beforeVal: string;
    afterVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ToAuctionEventEvent {
  export type InputTuple = [
    bid: BigNumberish,
    tokenId: BigNumberish,
    erc721Addr: AddressLike,
    auctionToken: AddressLike,
    startAuctionAmount: BigNumberish,
    startAuctioInterests: BigNumberish
  ];
  export type OutputTuple = [
    bid: bigint,
    tokenId: bigint,
    erc721Addr: string,
    auctionToken: string,
    startAuctionAmount: bigint,
    startAuctioInterests: bigint
  ];
  export interface OutputObject {
    bid: bigint;
    tokenId: bigint;
    erc721Addr: string;
    auctionToken: string;
    startAuctionAmount: bigint;
    startAuctioInterests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuadraticAuction extends BaseContract {
  connect(runner?: ContractRunner | null): QuadraticAuction;
  waitForDeployment(): Promise<this>;

  interface: QuadraticAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  _governance: TypedContractMethod<[], [string], "view">;

  abortiveAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  auctionInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        erc721Addr: string;
        tokenId: bigint;
        bid: bigint;
        auctionStartTime: bigint;
        auctionToken: string;
        auctionUser: string;
        startAuctionValue: bigint;
        startAuctionInterests: bigint;
        saledAmount: bigint;
        latestBidPrice: bigint;
        state: bigint;
        totalBidAmount: bigint;
      }
    ],
    "view"
  >;

  auctionRecords: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        auctionUser: string;
        auctionAmount: bigint;
        blockTime: bigint;
        returnPay: boolean;
        mulReduce: bigint;
      }
    ],
    "view"
  >;

  borrowCompound: TypedContractMethod<[], [string], "view">;

  changeUniswapV3Oracle: TypedContractMethod<
    [_uniswapV3Oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  doAuction: TypedContractMethod<
    [auctionId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  doHarvestAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  doInitialize: TypedContractMethod<
    [
      _borrowCompound: AddressLike,
      _uniswapV3Oracle: AddressLike,
      _reductionTime: BigNumberish,
      _reductionRatio: BigNumberish,
      _onePriceRatio: BigNumberish,
      _riskFactor: BigNumberish,
      _streamingProcessor: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  funder: TypedContractMethod<[], [string], "view">;

  funderClaim: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  funderPoolInterest: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getAuctionRecordLength: TypedContractMethod<
    [auctionId: BigNumberish],
    [bigint],
    "view"
  >;

  getAuctioningIds: TypedContractMethod<[], [bigint[]], "view">;

  getBidAuctioningIds: TypedContractMethod<[], [bigint[]], "view">;

  getCurrSaleInfo: TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        amount: bigint;
        onePrice: bigint;
        remainTime: bigint;
        mulReduce: bigint;
        bidFlag: boolean;
      }
    ],
    "view"
  >;

  getCurrSaleInfoV2: TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        amount: bigint;
        onePrice: bigint;
        remainTime: bigint;
        mulReduce: bigint;
        bidFlag: boolean;
        harvestFlag: boolean;
        harvestAddress: string;
      }
    ],
    "view"
  >;

  getHarvestAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        maxBidArid: bigint;
        maxBidAmount: bigint;
        totalBidAmount: bigint;
      }
    ],
    "view"
  >;

  getHarvestAuctionV2: TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, string] & {
        maxBidArid: bigint;
        maxBidAmount: bigint;
        totalBidAmount: bigint;
        harvestFlag: boolean;
        harvestAddress: string;
      }
    ],
    "view"
  >;

  getHolderAuctionIds: TypedContractMethod<[], [bigint[]], "view">;

  getUserBidAuctioningIds: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserBidAuctioningInfos: TypedContractMethod<
    [user: AddressLike],
    [QuadraticAuction.BidAuctionInfoStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  onePriceRatio: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  quadraticLiquidation: TypedContractMethod<[], [string], "view">;

  reductionRatio: TypedContractMethod<[], [bigint], "view">;

  reductionTime: TypedContractMethod<[], [bigint], "view">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  riskFactor: TypedContractMethod<[], [bigint], "view">;

  setActionConfig: TypedContractMethod<
    [
      _reductionRatio: BigNumberish,
      _reductionTime: BigNumberish,
      _riskFactor: BigNumberish,
      _onePriceRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFunder: TypedContractMethod<[_funder: AddressLike], [void], "nonpayable">;

  setGovernance: TypedContractMethod<
    [governance: AddressLike],
    [void],
    "nonpayable"
  >;

  setQuadraticLiquidation: TypedContractMethod<
    [_quadraticLiquidation: AddressLike],
    [void],
    "nonpayable"
  >;

  setStreamingProcessor: TypedContractMethod<
    [_streamingProcessor: AddressLike],
    [void],
    "nonpayable"
  >;

  streamingProcessor: TypedContractMethod<[], [string], "view">;

  toAuction: TypedContractMethod<
    [
      erc721Addr: AddressLike,
      tokenId: BigNumberish,
      bid: BigNumberish,
      auctionToken: AddressLike,
      startAuctionValue: BigNumberish,
      startAuctionInterests: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  uniswapV3Oracle: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "abortiveAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "auctionInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        erc721Addr: string;
        tokenId: bigint;
        bid: bigint;
        auctionStartTime: bigint;
        auctionToken: string;
        auctionUser: string;
        startAuctionValue: bigint;
        startAuctionInterests: bigint;
        saledAmount: bigint;
        latestBidPrice: bigint;
        state: bigint;
        totalBidAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctionRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        auctionUser: string;
        auctionAmount: bigint;
        blockTime: bigint;
        returnPay: boolean;
        mulReduce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowCompound"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeUniswapV3Oracle"
  ): TypedContractMethod<[_uniswapV3Oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doAuction"
  ): TypedContractMethod<
    [auctionId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doHarvestAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doInitialize"
  ): TypedContractMethod<
    [
      _borrowCompound: AddressLike,
      _uniswapV3Oracle: AddressLike,
      _reductionTime: BigNumberish,
      _reductionRatio: BigNumberish,
      _onePriceRatio: BigNumberish,
      _riskFactor: BigNumberish,
      _streamingProcessor: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "funderClaim"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funderPoolInterest"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuctionRecordLength"
  ): TypedContractMethod<[auctionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuctioningIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBidAuctioningIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCurrSaleInfo"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        amount: bigint;
        onePrice: bigint;
        remainTime: bigint;
        mulReduce: bigint;
        bidFlag: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrSaleInfoV2"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        amount: bigint;
        onePrice: bigint;
        remainTime: bigint;
        mulReduce: bigint;
        bidFlag: boolean;
        harvestFlag: boolean;
        harvestAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHarvestAuction"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        maxBidArid: bigint;
        maxBidAmount: bigint;
        totalBidAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHarvestAuctionV2"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, string] & {
        maxBidArid: bigint;
        maxBidAmount: bigint;
        totalBidAmount: bigint;
        harvestFlag: boolean;
        harvestAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHolderAuctionIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserBidAuctioningIds"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserBidAuctioningInfos"
  ): TypedContractMethod<
    [user: AddressLike],
    [QuadraticAuction.BidAuctionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "onePriceRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "quadraticLiquidation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reductionRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reductionTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "riskFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setActionConfig"
  ): TypedContractMethod<
    [
      _reductionRatio: BigNumberish,
      _reductionTime: BigNumberish,
      _riskFactor: BigNumberish,
      _onePriceRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFunder"
  ): TypedContractMethod<[_funder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGovernance"
  ): TypedContractMethod<[governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQuadraticLiquidation"
  ): TypedContractMethod<
    [_quadraticLiquidation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStreamingProcessor"
  ): TypedContractMethod<
    [_streamingProcessor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "streamingProcessor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toAuction"
  ): TypedContractMethod<
    [
      erc721Addr: AddressLike,
      tokenId: BigNumberish,
      bid: BigNumberish,
      auctionToken: AddressLike,
      startAuctionValue: BigNumberish,
      startAuctionInterests: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3Oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AbortiveAuctionEvent"
  ): TypedContractEvent<
    AbortiveAuctionEventEvent.InputTuple,
    AbortiveAuctionEventEvent.OutputTuple,
    AbortiveAuctionEventEvent.OutputObject
  >;
  getEvent(
    key: "ChangeUniswapV3OracleEvent"
  ): TypedContractEvent<
    ChangeUniswapV3OracleEventEvent.InputTuple,
    ChangeUniswapV3OracleEventEvent.OutputTuple,
    ChangeUniswapV3OracleEventEvent.OutputObject
  >;
  getEvent(
    key: "DoAuctionEvent"
  ): TypedContractEvent<
    DoAuctionEventEvent.InputTuple,
    DoAuctionEventEvent.OutputTuple,
    DoAuctionEventEvent.OutputObject
  >;
  getEvent(
    key: "DoHarvestAuctionEvent"
  ): TypedContractEvent<
    DoHarvestAuctionEventEvent.InputTuple,
    DoHarvestAuctionEventEvent.OutputTuple,
    DoHarvestAuctionEventEvent.OutputObject
  >;
  getEvent(
    key: "FunderClaimEvent"
  ): TypedContractEvent<
    FunderClaimEventEvent.InputTuple,
    FunderClaimEventEvent.OutputTuple,
    FunderClaimEventEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceTransferred"
  ): TypedContractEvent<
    GovernanceTransferredEvent.InputTuple,
    GovernanceTransferredEvent.OutputTuple,
    GovernanceTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetActionConfigEvent"
  ): TypedContractEvent<
    SetActionConfigEventEvent.InputTuple,
    SetActionConfigEventEvent.OutputTuple,
    SetActionConfigEventEvent.OutputObject
  >;
  getEvent(
    key: "SetFunderEvent"
  ): TypedContractEvent<
    SetFunderEventEvent.InputTuple,
    SetFunderEventEvent.OutputTuple,
    SetFunderEventEvent.OutputObject
  >;
  getEvent(
    key: "SetQuadraticLiquidationEvent"
  ): TypedContractEvent<
    SetQuadraticLiquidationEventEvent.InputTuple,
    SetQuadraticLiquidationEventEvent.OutputTuple,
    SetQuadraticLiquidationEventEvent.OutputObject
  >;
  getEvent(
    key: "SetStreamingProcessorEvent"
  ): TypedContractEvent<
    SetStreamingProcessorEventEvent.InputTuple,
    SetStreamingProcessorEventEvent.OutputTuple,
    SetStreamingProcessorEventEvent.OutputObject
  >;
  getEvent(
    key: "ToAuctionEvent"
  ): TypedContractEvent<
    ToAuctionEventEvent.InputTuple,
    ToAuctionEventEvent.OutputTuple,
    ToAuctionEventEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AbortiveAuctionEvent(uint256,address)": TypedContractEvent<
      AbortiveAuctionEventEvent.InputTuple,
      AbortiveAuctionEventEvent.OutputTuple,
      AbortiveAuctionEventEvent.OutputObject
    >;
    AbortiveAuctionEvent: TypedContractEvent<
      AbortiveAuctionEventEvent.InputTuple,
      AbortiveAuctionEventEvent.OutputTuple,
      AbortiveAuctionEventEvent.OutputObject
    >;

    "ChangeUniswapV3OracleEvent(address,address,address)": TypedContractEvent<
      ChangeUniswapV3OracleEventEvent.InputTuple,
      ChangeUniswapV3OracleEventEvent.OutputTuple,
      ChangeUniswapV3OracleEventEvent.OutputObject
    >;
    ChangeUniswapV3OracleEvent: TypedContractEvent<
      ChangeUniswapV3OracleEventEvent.InputTuple,
      ChangeUniswapV3OracleEventEvent.OutputTuple,
      ChangeUniswapV3OracleEventEvent.OutputObject
    >;

    "DoAuctionEvent(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      DoAuctionEventEvent.InputTuple,
      DoAuctionEventEvent.OutputTuple,
      DoAuctionEventEvent.OutputObject
    >;
    DoAuctionEvent: TypedContractEvent<
      DoAuctionEventEvent.InputTuple,
      DoAuctionEventEvent.OutputTuple,
      DoAuctionEventEvent.OutputObject
    >;

    "DoHarvestAuctionEvent(uint256,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      DoHarvestAuctionEventEvent.InputTuple,
      DoHarvestAuctionEventEvent.OutputTuple,
      DoHarvestAuctionEventEvent.OutputObject
    >;
    DoHarvestAuctionEvent: TypedContractEvent<
      DoHarvestAuctionEventEvent.InputTuple,
      DoHarvestAuctionEventEvent.OutputTuple,
      DoHarvestAuctionEventEvent.OutputObject
    >;

    "FunderClaimEvent(address,address,uint256)": TypedContractEvent<
      FunderClaimEventEvent.InputTuple,
      FunderClaimEventEvent.OutputTuple,
      FunderClaimEventEvent.OutputObject
    >;
    FunderClaimEvent: TypedContractEvent<
      FunderClaimEventEvent.InputTuple,
      FunderClaimEventEvent.OutputTuple,
      FunderClaimEventEvent.OutputObject
    >;

    "GovernanceTransferred(address,address)": TypedContractEvent<
      GovernanceTransferredEvent.InputTuple,
      GovernanceTransferredEvent.OutputTuple,
      GovernanceTransferredEvent.OutputObject
    >;
    GovernanceTransferred: TypedContractEvent<
      GovernanceTransferredEvent.InputTuple,
      GovernanceTransferredEvent.OutputTuple,
      GovernanceTransferredEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetActionConfigEvent(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SetActionConfigEventEvent.InputTuple,
      SetActionConfigEventEvent.OutputTuple,
      SetActionConfigEventEvent.OutputObject
    >;
    SetActionConfigEvent: TypedContractEvent<
      SetActionConfigEventEvent.InputTuple,
      SetActionConfigEventEvent.OutputTuple,
      SetActionConfigEventEvent.OutputObject
    >;

    "SetFunderEvent(address,address,address)": TypedContractEvent<
      SetFunderEventEvent.InputTuple,
      SetFunderEventEvent.OutputTuple,
      SetFunderEventEvent.OutputObject
    >;
    SetFunderEvent: TypedContractEvent<
      SetFunderEventEvent.InputTuple,
      SetFunderEventEvent.OutputTuple,
      SetFunderEventEvent.OutputObject
    >;

    "SetQuadraticLiquidationEvent(address,address)": TypedContractEvent<
      SetQuadraticLiquidationEventEvent.InputTuple,
      SetQuadraticLiquidationEventEvent.OutputTuple,
      SetQuadraticLiquidationEventEvent.OutputObject
    >;
    SetQuadraticLiquidationEvent: TypedContractEvent<
      SetQuadraticLiquidationEventEvent.InputTuple,
      SetQuadraticLiquidationEventEvent.OutputTuple,
      SetQuadraticLiquidationEventEvent.OutputObject
    >;

    "SetStreamingProcessorEvent(address,address,address)": TypedContractEvent<
      SetStreamingProcessorEventEvent.InputTuple,
      SetStreamingProcessorEventEvent.OutputTuple,
      SetStreamingProcessorEventEvent.OutputObject
    >;
    SetStreamingProcessorEvent: TypedContractEvent<
      SetStreamingProcessorEventEvent.InputTuple,
      SetStreamingProcessorEventEvent.OutputTuple,
      SetStreamingProcessorEventEvent.OutputObject
    >;

    "ToAuctionEvent(uint256,uint256,address,address,uint256,uint256)": TypedContractEvent<
      ToAuctionEventEvent.InputTuple,
      ToAuctionEventEvent.OutputTuple,
      ToAuctionEventEvent.OutputObject
    >;
    ToAuctionEvent: TypedContractEvent<
      ToAuctionEventEvent.InputTuple,
      ToAuctionEventEvent.OutputTuple,
      ToAuctionEventEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
