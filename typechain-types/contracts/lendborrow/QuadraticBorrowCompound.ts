/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface QuadraticBorrowCompoundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBorrowPool"
      | "applyRate"
      | "badDebtInterest"
      | "badDebtPrincipal"
      | "blockPerDay"
      | "borrowInfo"
      | "borrowPoolInfo"
      | "borrowUserInfos"
      | "changeUniswapV3Oracle"
      | "doInitialize"
      | "funder"
      | "funderClaim"
      | "funderPoolInterest"
      | "getBorrowIdsOfOwnerAndPoolId"
      | "getBorrowPoolIdsOfOwner"
      | "getBorrowingRate"
      | "getFundUtilization"
      | "getGlobalLendInterestShare"
      | "getLendingRate"
      | "getSpecial721Length"
      | "getUserApplyRate"
      | "getUserMaxBorrowAmount"
      | "globalDefault"
      | "interestPlatformRate"
      | "isBorrowOverdue"
      | "lendCompound"
      | "minSettingCollateral"
      | "pausePool"
      | "pendingReturnInterests"
      | "quadraticAuction"
      | "setBorrowPoolOverdueRate"
      | "setFunder"
      | "setInterestPlatformRate"
      | "setMinSettingCollateral"
      | "setSettlementBorrowAuth"
      | "setSpecial721BorrowRate"
      | "settlementBorrow"
      | "settlementBorrowAuth"
      | "sortTokens"
      | "special721Arr"
      | "special721Info"
      | "transferInterestToLend"
      | "transferToAuction"
      | "uniswapV3"
      | "uniswapV3Oracle"
      | "unpausePool"
      | "updateBorrowPool"
      | "userApplyRate"
      | "userReturn"
      | "v3NFTBorrow"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddNftV3WhiteListEvent"
      | "ApplyRateEvent"
      | "ChangeUniswapV3OracleEvent"
      | "FunderClaimEvent"
      | "Initialized"
      | "MinSettingCollateralEvent"
      | "PausePoolEvent"
      | "SetBorrowPoolOverdueRateEvent"
      | "SetFunderEvent"
      | "SetInterestPlatformRateEvent"
      | "SetNftV3WhiteListEvent"
      | "SetSpecial721BorrowRateEvent"
      | "SettlementBorrowEvent"
      | "TransferInterestToLendEvent"
      | "TransferToAuction"
      | "UserBorrow"
      | "UserReturn"
      | "setSettlementBorrowAuthEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBorrowPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applyRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "badDebtInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "badDebtPrincipal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowUserInfos",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeUniswapV3Oracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doInitialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "funder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "funderClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "funderPoolInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowIdsOfOwnerAndPoolId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowPoolIdsOfOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundUtilization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalLendInterestShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecial721Length",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserApplyRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMaxBorrowAmount",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestPlatformRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowOverdue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendCompound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSettingCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReturnInterests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quadraticAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowPoolOverdueRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestPlatformRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinSettingCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementBorrowAuth",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpecial721BorrowRate",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementBorrowAuth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sortTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "special721Arr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "special721Info",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferInterestToLend",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uniswapV3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Oracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpausePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBorrowPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userApplyRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userReturn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "v3NFTBorrow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBorrowPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "applyRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "badDebtInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badDebtPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowUserInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeUniswapV3Oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "funderClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "funderPoolInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowIdsOfOwnerAndPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowPoolIdsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalLendInterestShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpecial721Length",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserApplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMaxBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestPlatformRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowOverdue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSettingCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pausePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReturnInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quadraticAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowPoolOverdueRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFunder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterestPlatformRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinSettingCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementBorrowAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpecial721BorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementBorrowAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "special721Arr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "special721Info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferInterestToLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniswapV3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpausePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBorrowPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userApplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userReturn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "v3NFTBorrow",
    data: BytesLike
  ): Result;
}

export namespace AddNftV3WhiteListEventEvent {
  export type InputTuple = [
    position: BigNumberish,
    sender: AddressLike,
    token0: AddressLike,
    token1: AddressLike
  ];
  export type OutputTuple = [
    position: bigint,
    sender: string,
    token0: string,
    token1: string
  ];
  export interface OutputObject {
    position: bigint;
    sender: string;
    token0: string;
    token1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApplyRateEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    apply721Address: AddressLike,
    specialMaxRate: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    apply721Address: string,
    specialMaxRate: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    sender: string;
    apply721Address: string;
    specialMaxRate: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeUniswapV3OracleEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    beforeVal: AddressLike,
    afterVal: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    beforeVal: string,
    afterVal: string
  ];
  export interface OutputObject {
    sender: string;
    beforeVal: string;
    afterVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunderClaimEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    sender: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinSettingCollateralEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    pid: BigNumberish,
    beforeVal: BigNumberish,
    afterVal: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    pid: bigint,
    beforeVal: bigint,
    afterVal: bigint
  ];
  export interface OutputObject {
    sender: string;
    pid: bigint;
    beforeVal: bigint;
    afterVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausePoolEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    pid: BigNumberish,
    flag: boolean
  ];
  export type OutputTuple = [sender: string, pid: bigint, flag: boolean];
  export interface OutputObject {
    sender: string;
    pid: bigint;
    flag: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBorrowPoolOverdueRateEventEvent {
  export type InputTuple = [
    pid: BigNumberish,
    sender: AddressLike,
    beforeOverdueRate: BigNumberish,
    afterOverdueRate: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    sender: string,
    beforeOverdueRate: bigint,
    afterOverdueRate: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    sender: string;
    beforeOverdueRate: bigint;
    afterOverdueRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFunderEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    beforeVal: AddressLike,
    afterVal: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    beforeVal: string,
    afterVal: string
  ];
  export interface OutputObject {
    sender: string;
    beforeVal: string;
    afterVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetInterestPlatformRateEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    beforeValue: BigNumberish,
    afterValue: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    beforeValue: bigint,
    afterValue: bigint
  ];
  export interface OutputObject {
    sender: string;
    beforeValue: bigint;
    afterValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNftV3WhiteListEventEvent {
  export type InputTuple = [
    position: BigNumberish,
    sender: AddressLike,
    beforeToken0: AddressLike,
    beforeToken1: AddressLike,
    afterToken0: AddressLike,
    afterToken1: AddressLike
  ];
  export type OutputTuple = [
    position: bigint,
    sender: string,
    beforeToken0: string,
    beforeToken1: string,
    afterToken0: string,
    afterToken1: string
  ];
  export interface OutputObject {
    position: bigint;
    sender: string;
    beforeToken0: string;
    beforeToken1: string;
    afterToken0: string;
    afterToken1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSpecial721BorrowRateEventEvent {
  export type InputTuple = [
    special72: AddressLike,
    sender: AddressLike,
    beforeRate: BigNumberish,
    afterRate: BigNumberish
  ];
  export type OutputTuple = [
    special72: string,
    sender: string,
    beforeRate: bigint,
    afterRate: bigint
  ];
  export interface OutputObject {
    special72: string;
    sender: string;
    beforeRate: bigint;
    afterRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementBorrowEventEvent {
  export type InputTuple = [
    bid: BigNumberish,
    pid: BigNumberish,
    amount: BigNumberish,
    interests: BigNumberish,
    platFormInterests: BigNumberish
  ];
  export type OutputTuple = [
    bid: bigint,
    pid: bigint,
    amount: bigint,
    interests: bigint,
    platFormInterests: bigint
  ];
  export interface OutputObject {
    bid: bigint;
    pid: bigint;
    amount: bigint;
    interests: bigint;
    platFormInterests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferInterestToLendEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    pid: BigNumberish,
    toUser: AddressLike,
    interests: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    pid: bigint,
    toUser: string,
    interests: bigint
  ];
  export interface OutputObject {
    sender: string;
    pid: bigint;
    toUser: string;
    interests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToAuctionEvent {
  export type InputTuple = [
    bid: BigNumberish,
    tokenId: BigNumberish,
    pid: BigNumberish
  ];
  export type OutputTuple = [bid: bigint, tokenId: bigint, pid: bigint];
  export interface OutputObject {
    bid: bigint;
    tokenId: bigint;
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBorrowEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    pid: BigNumberish,
    bid: BigNumberish,
    value: BigNumberish,
    amount: BigNumberish,
    borrowRate: BigNumberish,
    apply721Address: AddressLike,
    startBlock: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    pid: bigint,
    bid: bigint,
    value: bigint,
    amount: bigint,
    borrowRate: bigint,
    apply721Address: string,
    startBlock: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    pid: bigint;
    bid: bigint;
    value: bigint;
    amount: bigint;
    borrowRate: bigint;
    apply721Address: string;
    startBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserReturnEvent {
  export type InputTuple = [
    user: AddressLike,
    bid: BigNumberish,
    pid: BigNumberish,
    amount: BigNumberish,
    interests: BigNumberish,
    platFormInterests: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    bid: bigint,
    pid: bigint,
    amount: bigint,
    interests: bigint,
    platFormInterests: bigint
  ];
  export interface OutputObject {
    user: string;
    bid: bigint;
    pid: bigint;
    amount: bigint;
    interests: bigint;
    platFormInterests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace setSettlementBorrowAuthEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    user: AddressLike,
    flag: boolean
  ];
  export type OutputTuple = [sender: string, user: string, flag: boolean];
  export interface OutputObject {
    sender: string;
    user: string;
    flag: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuadraticBorrowCompound extends BaseContract {
  connect(runner?: ContractRunner | null): QuadraticBorrowCompound;
  waitForDeployment(): Promise<this>;

  interface: QuadraticBorrowCompoundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBorrowPool: TypedContractMethod<
    [borrowToken: AddressLike, lendCToken: AddressLike],
    [void],
    "nonpayable"
  >;

  applyRate: TypedContractMethod<
    [special721: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  badDebtInterest: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  badDebtPrincipal: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  blockPerDay: TypedContractMethod<[], [bigint], "view">;

  borrowInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        user: string;
        pid: bigint;
        tokenId: bigint;
        borrowValue: bigint;
        amount: bigint;
        repaidAmount: bigint;
        startBowShare: bigint;
        startBlock: bigint;
        returnBlock: bigint;
        interests: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  borrowPoolInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        token: string;
        ctoken: string;
        curBorrow: bigint;
        curBowRate: bigint;
        lastShareBlock: bigint;
        globalBowShare: bigint;
        globalLendInterestShare: bigint;
        totalMineInterests: bigint;
        overdueRate: bigint;
      }
    ],
    "view"
  >;

  borrowUserInfos: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  changeUniswapV3Oracle: TypedContractMethod<
    [_uniswapV3Oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  doInitialize: TypedContractMethod<
    [
      _uniswapV3: AddressLike,
      _uniswapV3Oracle: AddressLike,
      _iQuadraticLendCompound: AddressLike,
      _quadraticAuction: AddressLike,
      _globalDefault: BigNumberish,
      _interestPlatformRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  funder: TypedContractMethod<[], [string], "view">;

  funderClaim: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  funderPoolInterest: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getBorrowIdsOfOwnerAndPoolId: TypedContractMethod<
    [owner: AddressLike, pid: BigNumberish],
    [bigint[]],
    "view"
  >;

  getBorrowPoolIdsOfOwner: TypedContractMethod<
    [owner: AddressLike],
    [bigint[]],
    "view"
  >;

  getBorrowingRate: TypedContractMethod<[pid: BigNumberish], [bigint], "view">;

  getFundUtilization: TypedContractMethod<
    [pid: BigNumberish],
    [bigint],
    "view"
  >;

  getGlobalLendInterestShare: TypedContractMethod<
    [pid: BigNumberish],
    [bigint],
    "view"
  >;

  getLendingRate: TypedContractMethod<[pid: BigNumberish], [bigint], "view">;

  getSpecial721Length: TypedContractMethod<[], [bigint], "view">;

  getUserApplyRate: TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        name: string;
        userMaxRate: bigint;
        defaultRate: bigint;
        tokenId: bigint;
        apply721Address: string;
        signed: boolean;
      }
    ],
    "view"
  >;

  getUserMaxBorrowAmount: TypedContractMethod<
    [
      pid: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      _user: AddressLike
    ],
    [[bigint, boolean] & { _maxBorrowAmount: bigint; _flag: boolean }],
    "view"
  >;

  globalDefault: TypedContractMethod<[], [bigint], "view">;

  interestPlatformRate: TypedContractMethod<[], [bigint], "view">;

  isBorrowOverdue: TypedContractMethod<[bid: BigNumberish], [boolean], "view">;

  lendCompound: TypedContractMethod<[], [string], "view">;

  minSettingCollateral: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  pausePool: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  pendingReturnInterests: TypedContractMethod<
    [bid: BigNumberish],
    [bigint],
    "view"
  >;

  quadraticAuction: TypedContractMethod<[], [string], "view">;

  setBorrowPoolOverdueRate: TypedContractMethod<
    [pid: BigNumberish, overdueRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFunder: TypedContractMethod<[_funder: AddressLike], [void], "nonpayable">;

  setInterestPlatformRate: TypedContractMethod<
    [_interestPlatformRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinSettingCollateral: TypedContractMethod<
    [_pid: BigNumberish, _minAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSettlementBorrowAuth: TypedContractMethod<
    [_user: AddressLike, _flag: boolean],
    [void],
    "nonpayable"
  >;

  setSpecial721BorrowRate: TypedContractMethod<
    [special721: AddressLike, rate: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;

  settlementBorrow: TypedContractMethod<
    [bid: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlementBorrowAuth: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  sortTokens: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[string, string] & { token0: string; token1: string }],
    "view"
  >;

  special721Arr: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  special721Info: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { name: string; rate: bigint }],
    "view"
  >;

  transferInterestToLend: TypedContractMethod<
    [pid: BigNumberish, toUser: AddressLike, interests: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferToAuction: TypedContractMethod<
    [bid: BigNumberish],
    [void],
    "nonpayable"
  >;

  uniswapV3: TypedContractMethod<[], [string], "view">;

  uniswapV3Oracle: TypedContractMethod<[], [string], "view">;

  unpausePool: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  updateBorrowPool: TypedContractMethod<
    [pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  userApplyRate: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        apply721Address: string;
        specialMaxRate: bigint;
        tokenId: bigint;
      }
    ],
    "view"
  >;

  userReturn: TypedContractMethod<
    [bid: BigNumberish, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  v3NFTBorrow: TypedContractMethod<
    [pid: BigNumberish, tokenId: BigNumberish, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBorrowPool"
  ): TypedContractMethod<
    [borrowToken: AddressLike, lendCToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyRate"
  ): TypedContractMethod<
    [special721: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "badDebtInterest"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "badDebtPrincipal"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockPerDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        user: string;
        pid: bigint;
        tokenId: bigint;
        borrowValue: bigint;
        amount: bigint;
        repaidAmount: bigint;
        startBowShare: bigint;
        startBlock: bigint;
        returnBlock: bigint;
        interests: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowPoolInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        token: string;
        ctoken: string;
        curBorrow: bigint;
        curBowRate: bigint;
        lastShareBlock: bigint;
        globalBowShare: bigint;
        globalLendInterestShare: bigint;
        totalMineInterests: bigint;
        overdueRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowUserInfos"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeUniswapV3Oracle"
  ): TypedContractMethod<[_uniswapV3Oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doInitialize"
  ): TypedContractMethod<
    [
      _uniswapV3: AddressLike,
      _uniswapV3Oracle: AddressLike,
      _iQuadraticLendCompound: AddressLike,
      _quadraticAuction: AddressLike,
      _globalDefault: BigNumberish,
      _interestPlatformRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "funderClaim"
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funderPoolInterest"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowIdsOfOwnerAndPoolId"
  ): TypedContractMethod<
    [owner: AddressLike, pid: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBorrowPoolIdsOfOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBorrowingRate"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFundUtilization"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGlobalLendInterestShare"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLendingRate"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSpecial721Length"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserApplyRate"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        name: string;
        userMaxRate: bigint;
        defaultRate: bigint;
        tokenId: bigint;
        apply721Address: string;
        signed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMaxBorrowAmount"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      _user: AddressLike
    ],
    [[bigint, boolean] & { _maxBorrowAmount: bigint; _flag: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalDefault"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "interestPlatformRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isBorrowOverdue"
  ): TypedContractMethod<[bid: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lendCompound"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minSettingCollateral"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pausePool"
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingReturnInterests"
  ): TypedContractMethod<[bid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quadraticAuction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBorrowPoolOverdueRate"
  ): TypedContractMethod<
    [pid: BigNumberish, overdueRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFunder"
  ): TypedContractMethod<[_funder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestPlatformRate"
  ): TypedContractMethod<
    [_interestPlatformRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinSettingCollateral"
  ): TypedContractMethod<
    [_pid: BigNumberish, _minAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSettlementBorrowAuth"
  ): TypedContractMethod<
    [_user: AddressLike, _flag: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpecial721BorrowRate"
  ): TypedContractMethod<
    [special721: AddressLike, rate: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementBorrow"
  ): TypedContractMethod<[bid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlementBorrowAuth"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "sortTokens"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[string, string] & { token0: string; token1: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "special721Arr"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "special721Info"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { name: string; rate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferInterestToLend"
  ): TypedContractMethod<
    [pid: BigNumberish, toUser: AddressLike, interests: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToAuction"
  ): TypedContractMethod<[bid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV3"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV3Oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpausePool"
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBorrowPool"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userApplyRate"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        apply721Address: string;
        specialMaxRate: bigint;
        tokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userReturn"
  ): TypedContractMethod<
    [bid: BigNumberish, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "v3NFTBorrow"
  ): TypedContractMethod<
    [pid: BigNumberish, tokenId: BigNumberish, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddNftV3WhiteListEvent"
  ): TypedContractEvent<
    AddNftV3WhiteListEventEvent.InputTuple,
    AddNftV3WhiteListEventEvent.OutputTuple,
    AddNftV3WhiteListEventEvent.OutputObject
  >;
  getEvent(
    key: "ApplyRateEvent"
  ): TypedContractEvent<
    ApplyRateEventEvent.InputTuple,
    ApplyRateEventEvent.OutputTuple,
    ApplyRateEventEvent.OutputObject
  >;
  getEvent(
    key: "ChangeUniswapV3OracleEvent"
  ): TypedContractEvent<
    ChangeUniswapV3OracleEventEvent.InputTuple,
    ChangeUniswapV3OracleEventEvent.OutputTuple,
    ChangeUniswapV3OracleEventEvent.OutputObject
  >;
  getEvent(
    key: "FunderClaimEvent"
  ): TypedContractEvent<
    FunderClaimEventEvent.InputTuple,
    FunderClaimEventEvent.OutputTuple,
    FunderClaimEventEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MinSettingCollateralEvent"
  ): TypedContractEvent<
    MinSettingCollateralEventEvent.InputTuple,
    MinSettingCollateralEventEvent.OutputTuple,
    MinSettingCollateralEventEvent.OutputObject
  >;
  getEvent(
    key: "PausePoolEvent"
  ): TypedContractEvent<
    PausePoolEventEvent.InputTuple,
    PausePoolEventEvent.OutputTuple,
    PausePoolEventEvent.OutputObject
  >;
  getEvent(
    key: "SetBorrowPoolOverdueRateEvent"
  ): TypedContractEvent<
    SetBorrowPoolOverdueRateEventEvent.InputTuple,
    SetBorrowPoolOverdueRateEventEvent.OutputTuple,
    SetBorrowPoolOverdueRateEventEvent.OutputObject
  >;
  getEvent(
    key: "SetFunderEvent"
  ): TypedContractEvent<
    SetFunderEventEvent.InputTuple,
    SetFunderEventEvent.OutputTuple,
    SetFunderEventEvent.OutputObject
  >;
  getEvent(
    key: "SetInterestPlatformRateEvent"
  ): TypedContractEvent<
    SetInterestPlatformRateEventEvent.InputTuple,
    SetInterestPlatformRateEventEvent.OutputTuple,
    SetInterestPlatformRateEventEvent.OutputObject
  >;
  getEvent(
    key: "SetNftV3WhiteListEvent"
  ): TypedContractEvent<
    SetNftV3WhiteListEventEvent.InputTuple,
    SetNftV3WhiteListEventEvent.OutputTuple,
    SetNftV3WhiteListEventEvent.OutputObject
  >;
  getEvent(
    key: "SetSpecial721BorrowRateEvent"
  ): TypedContractEvent<
    SetSpecial721BorrowRateEventEvent.InputTuple,
    SetSpecial721BorrowRateEventEvent.OutputTuple,
    SetSpecial721BorrowRateEventEvent.OutputObject
  >;
  getEvent(
    key: "SettlementBorrowEvent"
  ): TypedContractEvent<
    SettlementBorrowEventEvent.InputTuple,
    SettlementBorrowEventEvent.OutputTuple,
    SettlementBorrowEventEvent.OutputObject
  >;
  getEvent(
    key: "TransferInterestToLendEvent"
  ): TypedContractEvent<
    TransferInterestToLendEventEvent.InputTuple,
    TransferInterestToLendEventEvent.OutputTuple,
    TransferInterestToLendEventEvent.OutputObject
  >;
  getEvent(
    key: "TransferToAuction"
  ): TypedContractEvent<
    TransferToAuctionEvent.InputTuple,
    TransferToAuctionEvent.OutputTuple,
    TransferToAuctionEvent.OutputObject
  >;
  getEvent(
    key: "UserBorrow"
  ): TypedContractEvent<
    UserBorrowEvent.InputTuple,
    UserBorrowEvent.OutputTuple,
    UserBorrowEvent.OutputObject
  >;
  getEvent(
    key: "UserReturn"
  ): TypedContractEvent<
    UserReturnEvent.InputTuple,
    UserReturnEvent.OutputTuple,
    UserReturnEvent.OutputObject
  >;
  getEvent(
    key: "setSettlementBorrowAuthEvent"
  ): TypedContractEvent<
    setSettlementBorrowAuthEventEvent.InputTuple,
    setSettlementBorrowAuthEventEvent.OutputTuple,
    setSettlementBorrowAuthEventEvent.OutputObject
  >;

  filters: {
    "AddNftV3WhiteListEvent(uint256,address,address,address)": TypedContractEvent<
      AddNftV3WhiteListEventEvent.InputTuple,
      AddNftV3WhiteListEventEvent.OutputTuple,
      AddNftV3WhiteListEventEvent.OutputObject
    >;
    AddNftV3WhiteListEvent: TypedContractEvent<
      AddNftV3WhiteListEventEvent.InputTuple,
      AddNftV3WhiteListEventEvent.OutputTuple,
      AddNftV3WhiteListEventEvent.OutputObject
    >;

    "ApplyRateEvent(address,address,uint256,uint256)": TypedContractEvent<
      ApplyRateEventEvent.InputTuple,
      ApplyRateEventEvent.OutputTuple,
      ApplyRateEventEvent.OutputObject
    >;
    ApplyRateEvent: TypedContractEvent<
      ApplyRateEventEvent.InputTuple,
      ApplyRateEventEvent.OutputTuple,
      ApplyRateEventEvent.OutputObject
    >;

    "ChangeUniswapV3OracleEvent(address,address,address)": TypedContractEvent<
      ChangeUniswapV3OracleEventEvent.InputTuple,
      ChangeUniswapV3OracleEventEvent.OutputTuple,
      ChangeUniswapV3OracleEventEvent.OutputObject
    >;
    ChangeUniswapV3OracleEvent: TypedContractEvent<
      ChangeUniswapV3OracleEventEvent.InputTuple,
      ChangeUniswapV3OracleEventEvent.OutputTuple,
      ChangeUniswapV3OracleEventEvent.OutputObject
    >;

    "FunderClaimEvent(address,uint256,uint256)": TypedContractEvent<
      FunderClaimEventEvent.InputTuple,
      FunderClaimEventEvent.OutputTuple,
      FunderClaimEventEvent.OutputObject
    >;
    FunderClaimEvent: TypedContractEvent<
      FunderClaimEventEvent.InputTuple,
      FunderClaimEventEvent.OutputTuple,
      FunderClaimEventEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MinSettingCollateralEvent(address,uint256,uint256,uint256)": TypedContractEvent<
      MinSettingCollateralEventEvent.InputTuple,
      MinSettingCollateralEventEvent.OutputTuple,
      MinSettingCollateralEventEvent.OutputObject
    >;
    MinSettingCollateralEvent: TypedContractEvent<
      MinSettingCollateralEventEvent.InputTuple,
      MinSettingCollateralEventEvent.OutputTuple,
      MinSettingCollateralEventEvent.OutputObject
    >;

    "PausePoolEvent(address,uint256,bool)": TypedContractEvent<
      PausePoolEventEvent.InputTuple,
      PausePoolEventEvent.OutputTuple,
      PausePoolEventEvent.OutputObject
    >;
    PausePoolEvent: TypedContractEvent<
      PausePoolEventEvent.InputTuple,
      PausePoolEventEvent.OutputTuple,
      PausePoolEventEvent.OutputObject
    >;

    "SetBorrowPoolOverdueRateEvent(uint256,address,uint256,uint256)": TypedContractEvent<
      SetBorrowPoolOverdueRateEventEvent.InputTuple,
      SetBorrowPoolOverdueRateEventEvent.OutputTuple,
      SetBorrowPoolOverdueRateEventEvent.OutputObject
    >;
    SetBorrowPoolOverdueRateEvent: TypedContractEvent<
      SetBorrowPoolOverdueRateEventEvent.InputTuple,
      SetBorrowPoolOverdueRateEventEvent.OutputTuple,
      SetBorrowPoolOverdueRateEventEvent.OutputObject
    >;

    "SetFunderEvent(address,address,address)": TypedContractEvent<
      SetFunderEventEvent.InputTuple,
      SetFunderEventEvent.OutputTuple,
      SetFunderEventEvent.OutputObject
    >;
    SetFunderEvent: TypedContractEvent<
      SetFunderEventEvent.InputTuple,
      SetFunderEventEvent.OutputTuple,
      SetFunderEventEvent.OutputObject
    >;

    "SetInterestPlatformRateEvent(address,uint256,uint256)": TypedContractEvent<
      SetInterestPlatformRateEventEvent.InputTuple,
      SetInterestPlatformRateEventEvent.OutputTuple,
      SetInterestPlatformRateEventEvent.OutputObject
    >;
    SetInterestPlatformRateEvent: TypedContractEvent<
      SetInterestPlatformRateEventEvent.InputTuple,
      SetInterestPlatformRateEventEvent.OutputTuple,
      SetInterestPlatformRateEventEvent.OutputObject
    >;

    "SetNftV3WhiteListEvent(uint256,address,address,address,address,address)": TypedContractEvent<
      SetNftV3WhiteListEventEvent.InputTuple,
      SetNftV3WhiteListEventEvent.OutputTuple,
      SetNftV3WhiteListEventEvent.OutputObject
    >;
    SetNftV3WhiteListEvent: TypedContractEvent<
      SetNftV3WhiteListEventEvent.InputTuple,
      SetNftV3WhiteListEventEvent.OutputTuple,
      SetNftV3WhiteListEventEvent.OutputObject
    >;

    "SetSpecial721BorrowRateEvent(address,address,uint256,uint256)": TypedContractEvent<
      SetSpecial721BorrowRateEventEvent.InputTuple,
      SetSpecial721BorrowRateEventEvent.OutputTuple,
      SetSpecial721BorrowRateEventEvent.OutputObject
    >;
    SetSpecial721BorrowRateEvent: TypedContractEvent<
      SetSpecial721BorrowRateEventEvent.InputTuple,
      SetSpecial721BorrowRateEventEvent.OutputTuple,
      SetSpecial721BorrowRateEventEvent.OutputObject
    >;

    "SettlementBorrowEvent(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SettlementBorrowEventEvent.InputTuple,
      SettlementBorrowEventEvent.OutputTuple,
      SettlementBorrowEventEvent.OutputObject
    >;
    SettlementBorrowEvent: TypedContractEvent<
      SettlementBorrowEventEvent.InputTuple,
      SettlementBorrowEventEvent.OutputTuple,
      SettlementBorrowEventEvent.OutputObject
    >;

    "TransferInterestToLendEvent(address,uint256,address,uint256)": TypedContractEvent<
      TransferInterestToLendEventEvent.InputTuple,
      TransferInterestToLendEventEvent.OutputTuple,
      TransferInterestToLendEventEvent.OutputObject
    >;
    TransferInterestToLendEvent: TypedContractEvent<
      TransferInterestToLendEventEvent.InputTuple,
      TransferInterestToLendEventEvent.OutputTuple,
      TransferInterestToLendEventEvent.OutputObject
    >;

    "TransferToAuction(uint256,uint256,uint256)": TypedContractEvent<
      TransferToAuctionEvent.InputTuple,
      TransferToAuctionEvent.OutputTuple,
      TransferToAuctionEvent.OutputObject
    >;
    TransferToAuction: TypedContractEvent<
      TransferToAuctionEvent.InputTuple,
      TransferToAuctionEvent.OutputTuple,
      TransferToAuctionEvent.OutputObject
    >;

    "UserBorrow(address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      UserBorrowEvent.InputTuple,
      UserBorrowEvent.OutputTuple,
      UserBorrowEvent.OutputObject
    >;
    UserBorrow: TypedContractEvent<
      UserBorrowEvent.InputTuple,
      UserBorrowEvent.OutputTuple,
      UserBorrowEvent.OutputObject
    >;

    "UserReturn(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UserReturnEvent.InputTuple,
      UserReturnEvent.OutputTuple,
      UserReturnEvent.OutputObject
    >;
    UserReturn: TypedContractEvent<
      UserReturnEvent.InputTuple,
      UserReturnEvent.OutputTuple,
      UserReturnEvent.OutputObject
    >;

    "setSettlementBorrowAuthEvent(address,address,bool)": TypedContractEvent<
      setSettlementBorrowAuthEventEvent.InputTuple,
      setSettlementBorrowAuthEventEvent.OutputTuple,
      setSettlementBorrowAuthEventEvent.OutputObject
    >;
    setSettlementBorrowAuthEvent: TypedContractEvent<
      setSettlementBorrowAuthEventEvent.InputTuple,
      setSettlementBorrowAuthEventEvent.OutputTuple,
      setSettlementBorrowAuthEventEvent.OutputObject
    >;
  };
}
