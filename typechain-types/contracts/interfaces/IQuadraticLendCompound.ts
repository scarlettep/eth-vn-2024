/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IQuadraticLendCompoundStorage {
  export type CompoundLendPoolStruct = {
    token: AddressLike;
    spToken: AddressLike;
    curSupply: BigNumberish;
    curBorrow: BigNumberish;
    totalRecvInterests: BigNumberish;
  };

  export type CompoundLendPoolStructOutput = [
    token: string,
    spToken: string,
    curSupply: bigint,
    curBorrow: bigint,
    totalRecvInterests: bigint
  ] & {
    token: string;
    spToken: string;
    curSupply: bigint;
    curBorrow: bigint;
    totalRecvInterests: bigint;
  };

  export type LendUserInfoStruct = {
    lastLendInterestShare: BigNumberish;
    unRecvInterests: BigNumberish;
    currTotalLend: BigNumberish;
    userDli: BigNumberish;
  };

  export type LendUserInfoStructOutput = [
    lastLendInterestShare: bigint,
    unRecvInterests: bigint,
    currTotalLend: bigint,
    userDli: bigint
  ] & {
    lastLendInterestShare: bigint;
    unRecvInterests: bigint;
    currTotalLend: bigint;
    userDli: bigint;
  };
}

export interface IQuadraticLendCompoundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "doAfterLpTransfer"
      | "getPoolLength"
      | "lendPoolInfo"
      | "lendUserInfos"
      | "loanTransferToken"
      | "pendingRedeemInterests"
      | "repayTransferToken"
      | "settlementRepayTransferToken"
      | "tokenOfPid"
      | "transferToAuctionUpBorrow"
      | "userLend"
      | "userRedeem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "doAfterLpTransfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendUserInfos",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanTransferToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRedeemInterests",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayTransferToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementRepayTransferToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfPid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToAuctionUpBorrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLend",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRedeem",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "doAfterLpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendUserInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanTransferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRedeemInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayTransferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementRepayTransferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenOfPid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToAuctionUpBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userRedeem", data: BytesLike): Result;
}

export interface IQuadraticLendCompound extends BaseContract {
  connect(runner?: ContractRunner | null): IQuadraticLendCompound;
  waitForDeployment(): Promise<this>;

  interface: IQuadraticLendCompoundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  doAfterLpTransfer: TypedContractMethod<
    [
      ctoken: AddressLike,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getPoolLength: TypedContractMethod<[], [bigint], "view">;

  lendPoolInfo: TypedContractMethod<
    [pid: BigNumberish],
    [IQuadraticLendCompoundStorage.CompoundLendPoolStructOutput],
    "view"
  >;

  lendUserInfos: TypedContractMethod<
    [user: AddressLike, pid: BigNumberish],
    [IQuadraticLendCompoundStorage.LendUserInfoStructOutput],
    "view"
  >;

  loanTransferToken: TypedContractMethod<
    [pid: BigNumberish, toUser: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingRedeemInterests: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [[bigint, bigint] & { _lendInterests: bigint; _platFormInterests: bigint }],
    "view"
  >;

  repayTransferToken: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlementRepayTransferToken: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenOfPid: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  transferToAuctionUpBorrow: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userLend: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  userRedeem: TypedContractMethod<
    [pid: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "doAfterLpTransfer"
  ): TypedContractMethod<
    [
      ctoken: AddressLike,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPoolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lendPoolInfo"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [IQuadraticLendCompoundStorage.CompoundLendPoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lendUserInfos"
  ): TypedContractMethod<
    [user: AddressLike, pid: BigNumberish],
    [IQuadraticLendCompoundStorage.LendUserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanTransferToken"
  ): TypedContractMethod<
    [pid: BigNumberish, toUser: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingRedeemInterests"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [[bigint, bigint] & { _lendInterests: bigint; _platFormInterests: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "repayTransferToken"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementRepayTransferToken"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenOfPid"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferToAuctionUpBorrow"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userLend"
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRedeem"
  ): TypedContractMethod<
    [pid: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
