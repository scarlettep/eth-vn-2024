{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IQuadraticBorrowCompound.sol": {
      "content": "pragma solidity ^0.8.0;\n// SPDX-License-Identifier: SimPL-2.0\npragma experimental ABIEncoderV2;\n\nimport \"./IQuadraticBorrowCompoundStorage.sol\";\n\ninterface IQuadraticBorrowCompound is IQuadraticBorrowCompoundStorage {\n    function borrowPoolInfo(\n        uint256 pid\n    ) external view returns (CompoundBorrowPool memory borrowPool);\n    function borrowInfo(\n        uint256 bid\n    ) external view returns (BorrowInfo memory borrow);\n    function settlementBorrow(uint256 bid) external;\n    function doAfterLpTransfer(\n        address ctoken,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n    function updateBorrowPool(uint256 pid) external;\n    function addBorrowPool(address borrowToken, address ctoken) external;\n    function getGlobalLendInterestShare(\n        uint256 pid\n    ) external view returns (uint256 globalLendInterestShare);\n    function transferInterestToLend(\n        uint256 pid,\n        address toUser,\n        uint256 interests\n    ) external;\n    function getBorrowingRate(uint256 pid) external view returns (uint256);\n    function getLendingRate(uint256 pid) external view returns (uint256);\n    function borrowUserInfos(\n        address user,\n        uint256 pid\n    ) external view returns (BorrowUserInfo memory borrowUserInfo);\n}\n"
    },
    "contracts/interfaces/IQuadraticBorrowCompoundStorage.sol": {
      "content": "pragma solidity ^0.8.0;\n// SPDX-License-Identifier: SimPL-2.0\n\ninterface IQuadraticBorrowCompoundStorage {\n    struct BorrowUserInfo {\n        uint256 currTotalBorrow;\n    }\n\n    struct UserApplyRate {\n        address apply721Address;\n        uint256 specialMaxRate;\n        uint256 tokenId;\n    }\n\n    struct BorrowInfo {\n        address user;\n        uint256 pid;\n        // uint256 borrowType;     //1.v3 nft\n        uint256 tokenId;\n        uint256 borrowValue;\n        uint256 amount;\n        uint256 repaidAmount;\n        uint256 startBowShare;\n        // uint256 borrowDay;\n        uint256 startBlock;\n        uint256 returnBlock;\n        uint256 interests;\n        uint256 state; //0.init 1.borrowing 2.return 8.settlement 9.overdue\n    }\n\n    struct CompoundBorrowPool {\n        address token;\n        address ctoken;\n        uint256 curBorrow;\n        uint256 curBowRate;\n        uint256 lastShareBlock;\n        uint256 globalBowShare;\n        uint256 globalLendInterestShare;\n        uint256 totalMineInterests;\n        uint256 overdueRate;\n    }\n\n    struct Special721Info {\n        string name;\n        uint256 rate;\n    }\n}\n"
    },
    "contracts/interfaces/IQuadraticLendCompound.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IQuadraticLendCompoundStorage.sol\";\n\ninterface IQuadraticLendCompound is IQuadraticLendCompoundStorage {\n    function tokenOfPid(address token) external view returns (uint256 pid);\n    function lendPoolInfo(\n        uint256 pid\n    ) external view returns (CompoundLendPool memory pool);\n    function getPoolLength() external view returns (uint256 poolLength);\n    function doAfterLpTransfer(\n        address ctoken,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    function loanTransferToken(\n        uint256 pid,\n        address toUser,\n        uint256 amount\n    ) external;\n    function repayTransferToken(uint256 pid, uint256 amount) external;\n    function lendUserInfos(\n        address user,\n        uint256 pid\n    ) external view returns (LendUserInfo memory lendUserInfo);\n    function userLend(uint256 _pid, uint256 _amount) external;\n    function userRedeem(\n        uint256 pid,\n        uint256 _amount\n    ) external returns (uint256);\n    function pendingRedeemInterests(\n        uint256 _pid,\n        address _user\n    )\n        external\n        view\n        returns (uint256 _lendInterests, uint256 _platFormInterests);\n    function settlementRepayTransferToken(uint256 pid, uint256 amount) external;\n    function transferToAuctionUpBorrow(uint256 pid, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IQuadraticLendCompoundStorage.sol": {
      "content": "pragma solidity ^0.8.0;\n// SPDX-License-Identifier: SimPL-2.0\n\ninterface IQuadraticLendCompoundStorage {\n    struct LendUserInfo {\n        uint256 lastLendInterestShare;\n        uint256 unRecvInterests;\n        uint256 currTotalLend;\n        uint256 userDli;\n    }\n\n    struct CompoundLendPool {\n        address token;\n        address spToken;\n        uint256 curSupply;\n        uint256 curBorrow;\n        uint256 totalRecvInterests; //User receives interest\n    }\n}\n"
    },
    "contracts/lendborrow/QuadraticBorrowCompound.sol": {
      "content": "pragma solidity ^0.8.0;\n// SPDX-License-Identifier: SimPL-2.0\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"./QuadraticFinanceToken.sol\";\n\nimport \"../uniswap/IUniswapV3Oracle.sol\";\n\nimport \"../interfaces/IQuadraticBorrowCompoundStorage.sol\";\nimport \"../interfaces/IQuadraticLendCompoundStorage.sol\";\n\ncontract QuadraticBorrowCompound is\n    IQuadraticBorrowCompoundStorage,\n    IQuadraticLendCompoundStorage,\n    Initializable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    event UserBorrow(\n        address indexed user,\n        uint256 indexed tokenId,\n        uint256 indexed pid,\n        uint256 bid,\n        uint256 value,\n        uint256 amount,\n        uint256 borrowRate,\n        address apply721Address,\n        uint256 startBlock\n    );\n    event UserReturn(\n        address indexed user,\n        uint256 indexed bid,\n        uint256 pid,\n        uint256 amount,\n        uint256 interests,\n        uint256 platFormInterests\n    );\n    event TransferToAuction(\n        uint256 indexed bid,\n        uint256 indexed tokenId,\n        uint256 pid\n    );\n    event SettlementBorrowEvent(\n        uint256 indexed bid,\n        uint256 pid,\n        uint256 amount,\n        uint256 interests,\n        uint256 platFormInterests\n    );\n\n    event AddNftV3WhiteListEvent(\n        uint256 indexed position,\n        address sender,\n        address token0,\n        address token1\n    );\n    event SetNftV3WhiteListEvent(\n        uint256 indexed position,\n        address sender,\n        address beforeToken0,\n        address beforeToken1,\n        address afterToken0,\n        address afterToken1\n    );\n    event SetBorrowPoolOverdueRateEvent(\n        uint256 indexed pid,\n        address sender,\n        uint256 beforeOverdueRate,\n        uint256 afterOverdueRate\n    );\n\n    event SetSpecial721BorrowRateEvent(\n        address indexed special72,\n        address sender,\n        uint256 beforeRate,\n        uint256 afterRate\n    );\n\n    event ApplyRateEvent(\n        address indexed sender,\n        address apply721Address,\n        uint256 specialMaxRate,\n        uint256 tokenId\n    );\n    event setSettlementBorrowAuthEvent(\n        address indexed sender,\n        address user,\n        bool flag\n    );\n    event TransferInterestToLendEvent(\n        address indexed sender,\n        uint256 pid,\n        address toUser,\n        uint256 interests\n    );\n    event SetInterestPlatformRateEvent(\n        address indexed sender,\n        uint256 beforeValue,\n        uint256 afterValue\n    );\n    event SetFunderEvent(\n        address indexed sender,\n        address beforeVal,\n        address afterVal\n    );\n    event FunderClaimEvent(address indexed sender, uint256 pid, uint256 amount);\n    event MinSettingCollateralEvent(\n        address indexed sender,\n        uint256 pid,\n        uint256 beforeVal,\n        uint256 afterVal\n    );\n    event PausePoolEvent(address indexed sender, uint256 pid, bool flag);\n    event ChangeUniswapV3OracleEvent(\n        address indexed sender,\n        address beforeVal,\n        address afterVal\n    );\n\n    mapping(address => mapping(uint256 => BorrowUserInfo))\n        public borrowUserInfos;\n    // Mapping from holder address to their (enumerable) set of owned borrow id\n    mapping(address => mapping(uint256 => EnumerableSet.UintSet))\n        private _holderBorrowIds;\n\n    mapping(address => EnumerableSet.UintSet) private _holderBorrowPoolIds;\n\n    BorrowInfo[] public borrowInfo;\n\n    IERC721 public uniswapV3;\n\n    address public quadraticAuction;\n\n    IQuadraticLendCompound public lendCompound;\n    CompoundBorrowPool[] public borrowPoolInfo;\n\n    address[] public special721Arr;\n    mapping(address => Special721Info) public special721Info;\n\n    mapping(address => UserApplyRate) public userApplyRate;\n\n    IUniswapV3Oracle public uniswapV3Oracle;\n\n    uint256 public constant blockPerDay = 5760;\n\n    uint256 public globalDefault = 650;\n\n    mapping(address => bool) public settlementBorrowAuth;\n\n    mapping(uint256 => uint256) public badDebtPrincipal;\n    mapping(uint256 => uint256) public badDebtInterest;\n\n    address public funder;\n    uint256 public interestPlatformRate;\n    mapping(uint256 => uint256) public funderPoolInterest; //pid => amount\n\n    mapping(uint256 => uint256) public minSettingCollateral; // pid => min amount\n\n    modifier onlyLendVistor() {\n        require(address(lendCompound) == msg.sender, \"not lend vistor allow.\");\n        _;\n    }\n\n    modifier onlySettlementVistor() {\n        require(\n            settlementBorrowAuth[msg.sender],\n            \"not settlement borrow vistor allow.\"\n        );\n        _;\n    }\n\n    modifier onlyFunderVistor() {\n        require(funder == msg.sender, \"not funder vistor allow.\");\n        _;\n    }\n\n    function doInitialize(\n        address _uniswapV3,\n        address _uniswapV3Oracle,\n        IQuadraticLendCompound _iQuadraticLendCompound,\n        address _quadraticAuction,\n        uint256 _globalDefault,\n        uint256 _interestPlatformRate\n    ) public initializer {\n        require(_globalDefault < 1_000, \"The maximum ratio has been exceeded.\");\n        require(\n            _interestPlatformRate < 10_000,\n            \"The maximum ratio has been exceeded.\"\n        );\n\n        uniswapV3 = IERC721(_uniswapV3);\n        uniswapV3Oracle = IUniswapV3Oracle(_uniswapV3Oracle);\n        lendCompound = _iQuadraticLendCompound;\n        quadraticAuction = _quadraticAuction;\n        globalDefault = _globalDefault;\n        settlementBorrowAuth[quadraticAuction] = true;\n        interestPlatformRate = _interestPlatformRate;\n    }\n\n    function changeUniswapV3Oracle(\n        address _uniswapV3Oracle\n    ) external {\n        address _beforeVal = address(uniswapV3Oracle);\n        uniswapV3Oracle = IUniswapV3Oracle(_uniswapV3Oracle);\n        emit ChangeUniswapV3OracleEvent(\n            msg.sender,\n            _beforeVal,\n            _uniswapV3Oracle\n        );\n    }\n\n    function setMinSettingCollateral(\n        uint256 _pid,\n        uint256 _minAmount\n    ) external {\n        uint256 _beforeVal = minSettingCollateral[_pid];\n        minSettingCollateral[_pid] = _minAmount;\n        emit MinSettingCollateralEvent(\n            msg.sender,\n            _pid,\n            _beforeVal,\n            _minAmount\n        );\n    }\n\n    function setInterestPlatformRate(\n        uint256 _interestPlatformRate\n    ) external {\n        require(\n            _interestPlatformRate < 10_000,\n            \"The maximum ratio has been exceeded.\"\n        );\n        uint256 _beforeValue = interestPlatformRate;\n        interestPlatformRate = _interestPlatformRate;\n        emit SetInterestPlatformRateEvent(\n            msg.sender,\n            _beforeValue,\n            _interestPlatformRate\n        );\n    }\n\n    function setSettlementBorrowAuth(\n        address _user,\n        bool _flag\n    ) external {\n        settlementBorrowAuth[_user] = _flag;\n        emit setSettlementBorrowAuthEvent(msg.sender, _user, _flag);\n    }\n\n    function pausePool(uint256 _pid) external {\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[_pid];\n        emit PausePoolEvent(msg.sender, _pid, true);\n    }\n\n    function unpausePool(uint256 _pid) external {\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[_pid];\n        emit PausePoolEvent(msg.sender, _pid, false);\n    }\n\n    function addBorrowPool(\n        address borrowToken,\n        address lendCToken\n    ) external onlyLendVistor {\n        borrowPoolInfo.push(\n            CompoundBorrowPool({\n                token: borrowToken,\n                ctoken: lendCToken,\n                curBorrow: 0,\n                curBowRate: 0,\n                lastShareBlock: block.number,\n                globalBowShare: 0,\n                globalLendInterestShare: 0,\n                totalMineInterests: 0,\n                overdueRate: 800\n            })\n        );\n    }\n\n    function setSpecial721BorrowRate(\n        address special721,\n        uint256 rate,\n        string memory name\n    ) external {\n        require(rate < 1000, \"The maximum ratio has been exceeded.\");\n        uint256 beforeRate = special721Info[special721].rate;\n\n        special721Info[special721].name = name;\n        special721Info[special721].rate = rate;\n\n        bool flag = true;\n        for (uint i = 0; i < special721Arr.length; i++) {\n            if (special721Arr[i] == special721) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            special721Arr[special721Arr.length] = special721;\n        }\n\n        emit SetSpecial721BorrowRateEvent(\n            special721,\n            msg.sender,\n            beforeRate,\n            rate\n        );\n    }\n\n    function setBorrowPoolOverdueRate(\n        uint256 pid,\n        uint256 overdueRate\n    ) external {\n        CompoundBorrowPool storage _borrowPool = borrowPoolInfo[pid];\n        uint256 beforeOverdueRate = _borrowPool.overdueRate;\n        _borrowPool.overdueRate = overdueRate;\n        emit SetBorrowPoolOverdueRateEvent(\n            pid,\n            msg.sender,\n            beforeOverdueRate,\n            overdueRate\n        );\n    }\n\n    function setFunder(address _funder) external {\n        address _beforeVal = funder;\n        funder = _funder;\n        emit SetFunderEvent(msg.sender, _beforeVal, _funder);\n    }\n\n    function funderClaim(\n        uint256 _pid,\n        uint256 _amount\n    ) external {\n        uint256 _totalAmount = funderPoolInterest[_pid];\n        require(_totalAmount >= _amount, \"Wrong amount.\");\n        funderPoolInterest[_pid] = funderPoolInterest[_pid].sub(_amount);\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[_pid];\n\n        IERC20(_borrowPool.token).safeTransfer(funder, _amount);\n\n        emit FunderClaimEvent(msg.sender, _pid, _amount);\n    }\n\n    function transferInterestToLend(\n        uint256 pid,\n        address toUser,\n        uint256 interests\n    ) external {\n        IERC20(borrowPoolInfo[pid].token).safeTransfer(toUser, interests);\n        emit TransferInterestToLendEvent(msg.sender, pid, toUser, interests);\n    }\n\n    function getUserMaxBorrowAmount(\n        uint256 pid,\n        uint256 tokenId,\n        uint256 borrowAmount,\n        address _user\n    ) public view returns (uint256 _maxBorrowAmount, bool _flag) {\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[pid];\n\n        (uint256 _value, ) = uniswapV3Oracle.getTWAPQuoteNft(\n            tokenId,\n            _borrowPool.token\n        );\n\n        (, uint256 _borrowRate, , , , ) = getUserApplyRate(_user);\n\n        _maxBorrowAmount = _value.mul(_borrowRate).div(1000);\n        _flag = _maxBorrowAmount >= borrowAmount;\n    }\n\n    function v3NFTBorrow(\n        uint256 pid,\n        uint256 tokenId,\n        uint256 borrowAmount\n    ) public {\n        BorrowUserInfo storage _user = borrowUserInfos[msg.sender][pid];\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[pid];\n\n        (uint256 _value, ) = uniswapV3Oracle.getTWAPQuoteNft(\n            tokenId,\n            _borrowPool.token\n        );\n\n        require(\n            _value > minSettingCollateral[pid],\n            \"The value of collateral is too low.\"\n        );\n\n        (, uint256 _borrowRate, , , , ) = getUserApplyRate(msg.sender);\n\n        uint256 _maxBorrowAmount = _value.mul(_borrowRate).div(1000);\n        require(\n            _maxBorrowAmount >= borrowAmount,\n            \"Exceeds the maximum loanable amount\"\n        );\n\n        _upGobalBorrowInfo(pid, borrowAmount, 1);\n\n        borrowInfo.push(\n            BorrowInfo({\n                user: msg.sender,\n                pid: pid,\n                // borrowType: 1,\n                tokenId: tokenId,\n                borrowValue: _value,\n                amount: borrowAmount,\n                repaidAmount: 0,\n                startBowShare: _borrowPool.globalBowShare,\n                // borrowDay: 0,\n                startBlock: block.number,\n                returnBlock: 0,\n                interests: 0,\n                state: 1\n            })\n        );\n        uint256 _bid = borrowInfo.length - 1;\n\n        _user.currTotalBorrow = _user.currTotalBorrow.add(borrowAmount);\n\n        if (_holderBorrowIds[msg.sender][pid].length() == 0) {\n            _holderBorrowPoolIds[msg.sender].add(pid);\n        }\n        _holderBorrowIds[msg.sender][pid].add(_bid);\n\n        uniswapV3.transferFrom(msg.sender, address(this), tokenId);\n\n        lendCompound.loanTransferToken(pid, msg.sender, borrowAmount);\n\n        emit UserBorrow(\n            msg.sender,\n            tokenId,\n            pid,\n            _bid,\n            _value,\n            borrowAmount,\n            _borrowRate,\n            userApplyRate[msg.sender].apply721Address,\n            block.number\n        );\n    }\n\n    function userReturn(\n        uint256 bid,\n        uint256 repayAmount\n    ) public {\n        // 2021-1-18 when the collateral is to be cleared and transferred to auction, repayment can be carried out\n        // require(!isBorrowOverdue(bid), 'borrow is overdue');\n        BorrowInfo storage _borrowInfo = borrowInfo[bid];\n        require(_borrowInfo.user == msg.sender, \"not owner\");\n\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[_borrowInfo.pid];\n\n        BorrowUserInfo storage _user = borrowUserInfos[msg.sender][\n            _borrowInfo.pid\n        ];\n\n        uint256 _borrowInterests = _pendingReturnInterests(bid);\n        require(\n            repayAmount >= _borrowInterests,\n            \"Not enough to repay interest.\"\n        );\n\n        uint256 _repayAllAmount = _borrowInfo.amount.add(_borrowInterests);\n\n        if (repayAmount > _repayAllAmount) {\n            repayAmount = _repayAllAmount;\n        }\n\n        uint256 _repayPrincipal = repayAmount.sub(_borrowInterests);\n\n        uint256 _userBalance = IERC20(_borrowPool.token).balanceOf(msg.sender);\n        require(_userBalance >= repayAmount, \"not enough amount.\");\n\n        _upGobalBorrowInfo(_borrowInfo.pid, _repayPrincipal, 2);\n\n        uint256 _platFormInterests = _borrowInterests\n            .mul(interestPlatformRate)\n            .div(10_000);\n\n        _updateRealReturnInterest(\n            _borrowInfo.pid,\n            _borrowInterests.sub(_platFormInterests)\n        );\n\n        _user.currTotalBorrow = _user.currTotalBorrow.sub(_repayPrincipal);\n\n        if (_repayPrincipal == _borrowInfo.amount) {\n            _holderBorrowIds[msg.sender][_borrowInfo.pid].remove(bid);\n            if (_user.currTotalBorrow == 0) {\n                if (\n                    _holderBorrowIds[msg.sender][_borrowInfo.pid].length() == 0\n                ) {\n                    _holderBorrowPoolIds[msg.sender].remove(_borrowInfo.pid);\n                }\n            }\n            _borrowInfo.returnBlock = block.number;\n            _borrowInfo.state = 2;\n            uniswapV3.transferFrom(\n                address(this),\n                msg.sender,\n                _borrowInfo.tokenId\n            );\n        } else {\n            _borrowInfo.amount = _borrowInfo.amount.sub(_repayPrincipal);\n            _borrowInfo.startBowShare = _borrowPool.globalBowShare;\n        }\n        _borrowInfo.repaidAmount = _borrowInfo.repaidAmount.add(\n            _repayPrincipal\n        );\n        _borrowInfo.interests = _borrowInfo.interests.add(_borrowInterests);\n\n        IERC20(_borrowPool.token).safeTransferFrom(\n            msg.sender,\n            address(this),\n            repayAmount\n        );\n\n        if (_platFormInterests > 0) {\n            funderPoolInterest[_borrowInfo.pid] = funderPoolInterest[\n                _borrowInfo.pid\n            ].add(_platFormInterests);\n        }\n\n        IERC20(_borrowPool.token).safeApprove(address(lendCompound), 0);\n        IERC20(_borrowPool.token).safeApprove(\n            address(lendCompound),\n            _repayPrincipal\n        );\n        lendCompound.repayTransferToken(_borrowInfo.pid, _repayPrincipal);\n\n        emit UserReturn(\n            msg.sender,\n            bid,\n            _borrowInfo.pid,\n            _repayPrincipal,\n            _borrowInterests,\n            _platFormInterests\n        );\n    }\n\n    function applyRate(\n        address special721,\n        uint256 tokenId\n    ) external {\n        uint256 _confRate = special721Info[special721].rate;\n        require(_confRate > 0, \"This 721 Contract not setting.\");\n        userApplyRate[msg.sender].apply721Address = special721;\n        userApplyRate[msg.sender].specialMaxRate = _confRate;\n        userApplyRate[msg.sender].tokenId = tokenId;\n        emit ApplyRateEvent(msg.sender, special721, _confRate, tokenId);\n    }\n\n    function getUserApplyRate(\n        address user\n    )\n        public\n        view\n        returns (\n            string memory name,\n            uint256 userMaxRate,\n            uint256 defaultRate,\n            uint256 tokenId,\n            address apply721Address,\n            bool signed\n        )\n    {\n        defaultRate = globalDefault;\n        apply721Address = userApplyRate[user].apply721Address;\n        signed = false;\n        if (apply721Address != address(0)) {\n            tokenId = userApplyRate[user].tokenId;\n            address tokenOwner = IERC721(apply721Address).ownerOf(tokenId);\n            if (user == tokenOwner) {\n                userMaxRate = userApplyRate[user].specialMaxRate;\n                signed = true;\n                name = special721Info[apply721Address].name;\n            }\n        }\n\n        if (userMaxRate == 0) {\n            userMaxRate = defaultRate;\n        }\n    }\n\n    function transferToAuction(\n        uint256 bid\n    ) external {\n        require(isBorrowOverdue(bid), \"can not auction now\");\n\n        BorrowInfo storage _borrowInfo = borrowInfo[bid];\n\n        require(_borrowInfo.state == 1, \"borrow state error.\");\n        address _userAddr = _borrowInfo.user;\n\n        CompoundBorrowPool storage _borrowPool = borrowPoolInfo[\n            _borrowInfo.pid\n        ];\n\n        BorrowUserInfo storage _user = borrowUserInfos[_userAddr][\n            _borrowInfo.pid\n        ];\n\n        _borrowInfo.state = 9;\n\n        _borrowInfo.interests = _pendingReturnInterests(bid);\n\n        _user.currTotalBorrow = _user.currTotalBorrow.sub(_borrowInfo.amount);\n\n        _holderBorrowIds[_userAddr][_borrowInfo.pid].remove(bid);\n        if (_holderBorrowIds[_userAddr][_borrowInfo.pid].length() == 0) {\n            _holderBorrowPoolIds[_userAddr].remove(_borrowInfo.pid);\n        }\n\n        badDebtPrincipal[_borrowInfo.pid] = badDebtPrincipal[_borrowInfo.pid]\n            .add(_borrowInfo.amount);\n        badDebtInterest[_borrowInfo.pid] = badDebtInterest[_borrowInfo.pid].add(\n            _borrowInfo.interests\n        );\n\n        _upGobalBorrowInfo(_borrowInfo.pid, _borrowInfo.amount, 2);\n        lendCompound.transferToAuctionUpBorrow(\n            _borrowInfo.pid,\n            _borrowInfo.amount\n        );\n\n        uniswapV3.transferFrom(\n            address(this),\n            quadraticAuction,\n            _borrowInfo.tokenId\n        );\n\n        emit TransferToAuction(bid, _borrowInfo.tokenId, _borrowInfo.pid);\n    }\n\n    function settlementBorrow(\n        uint256 bid\n    ) public onlySettlementVistor {\n        BorrowInfo storage _borrowInfo = borrowInfo[bid];\n        require(_borrowInfo.state == 9, \"error status\");\n\n        CompoundBorrowPool storage _borrowPool = borrowPoolInfo[\n            _borrowInfo.pid\n        ];\n\n        _borrowInfo.state = 8;\n        _borrowInfo.returnBlock = block.number;\n\n        uint256 totalReturn = _borrowInfo.amount.add(_borrowInfo.interests);\n\n        badDebtPrincipal[_borrowInfo.pid] = badDebtPrincipal[_borrowInfo.pid]\n            .sub(_borrowInfo.amount);\n        badDebtInterest[_borrowInfo.pid] = badDebtInterest[_borrowInfo.pid].sub(\n            _borrowInfo.interests\n        );\n\n        uint256 _platFormInterests = _borrowInfo\n            .interests\n            .mul(interestPlatformRate)\n            .div(10_000);\n\n        _updateRealReturnInterest(\n            _borrowInfo.pid,\n            _borrowInfo.interests.sub(_platFormInterests)\n        );\n\n        IERC20(_borrowPool.token).safeTransferFrom(\n            msg.sender,\n            address(this),\n            totalReturn\n        );\n\n        if (_platFormInterests > 0) {\n            funderPoolInterest[_borrowInfo.pid] = funderPoolInterest[\n                _borrowInfo.pid\n            ].add(_platFormInterests);\n        }\n\n        IERC20(_borrowPool.token).safeApprove(address(lendCompound), 0);\n        IERC20(_borrowPool.token).safeApprove(\n            address(lendCompound),\n            _borrowInfo.amount\n        );\n        lendCompound.settlementRepayTransferToken(\n            _borrowInfo.pid,\n            _borrowInfo.amount\n        );\n\n        emit SettlementBorrowEvent(\n            bid,\n            _borrowInfo.pid,\n            _borrowInfo.amount,\n            _borrowInfo.interests,\n            _platFormInterests\n        );\n    }\n\n    function getSpecial721Length() external view returns (uint256) {\n        return special721Arr.length;\n    }\n\n    function pendingReturnInterests(\n        uint256 bid\n    ) external view returns (uint256) {\n        if (isBorrowOverdue(bid)) {\n            return 0;\n        }\n\n        return _pendingReturnInterests(bid);\n    }\n\n    function _pendingReturnInterests(\n        uint256 bid\n    ) private view returns (uint256) {\n        BorrowInfo memory _borrowInfo = borrowInfo[bid];\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[_borrowInfo.pid];\n        uint256 addBowShare = _calAddBowShare(\n            _borrowPool.curBowRate,\n            _borrowPool.lastShareBlock,\n            block.number\n        );\n        return\n            _borrowPool\n                .globalBowShare\n                .add(addBowShare)\n                .sub(_borrowInfo.startBowShare)\n                .mul(_borrowInfo.amount)\n                .div(1e12);\n    }\n\n    function getGlobalLendInterestShare(\n        uint256 pid\n    ) external view returns (uint256 globalLendInterestShare) {\n        globalLendInterestShare = borrowPoolInfo[pid].globalLendInterestShare;\n    }\n\n    function isBorrowOverdue(uint256 bid) public view returns (bool) {\n        BorrowInfo memory _borrowInfo = borrowInfo[bid];\n\n        CompoundBorrowPool memory _borrowPool = borrowPoolInfo[_borrowInfo.pid];\n        (uint256 _currValue, ) = uniswapV3Oracle.getTWAPQuoteNft(\n            _borrowInfo.tokenId,\n            _borrowPool.token\n        );\n\n        uint256 auctionThreshold = _currValue.mul(_borrowPool.overdueRate).div(\n            1000\n        );\n\n        uint256 interests = _pendingReturnInterests(bid);\n\n        if (interests.add(_borrowInfo.amount) > auctionThreshold) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function updateBorrowPool(uint256 pid) external onlyLendVistor {\n        _updateCompound(pid);\n    }\n\n    function getBorrowIdsOfOwnerAndPoolId(\n        address owner,\n        uint256 pid\n    ) external view returns (uint256[] memory) {\n        uint256[] memory tokens = new uint256[](\n            _holderBorrowIds[owner][pid].length()\n        );\n        for (uint256 i = 0; i < _holderBorrowIds[owner][pid].length(); i++) {\n            tokens[i] = _holderBorrowIds[owner][pid].at(i);\n        }\n        return tokens;\n    }\n\n    function getBorrowPoolIdsOfOwner(\n        address owner\n    ) external view returns (uint256[] memory) {\n        uint256[] memory tokens = new uint256[](\n            _holderBorrowPoolIds[owner].length()\n        );\n        for (uint256 i = 0; i < _holderBorrowPoolIds[owner].length(); i++) {\n            tokens[i] = _holderBorrowPoolIds[owner].at(i);\n        }\n        return tokens;\n    }\n\n    function getFundUtilization(uint256 pid) public view returns (uint256) {\n        CompoundLendPool memory _lendPool = lendCompound.lendPoolInfo(pid);\n\n        if (_lendPool.curSupply.add(_lendPool.curBorrow) <= 0) {\n            return 0;\n        }\n        return\n            _lendPool.curBorrow.mul(1e12).div(\n                _lendPool.curSupply.add(_lendPool.curBorrow)\n            );\n    }\n\n    function getBorrowingRate(uint256 pid) public view returns (uint256) {\n        return\n            getFundUtilization(pid).mul(200000000000).div(1e12).add(\n                25000000000\n            );\n    }\n\n    function getLendingRate(uint256 pid) public view returns (uint256) {\n        return getFundUtilization(pid).mul(getBorrowingRate(pid)).div(1e12);\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) public pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"V3 NFT: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"V3 NFT: ZERO_ADDRESS\");\n    }\n\n    function _upGobalBorrowInfo(\n        uint256 pid,\n        uint256 amount,\n        uint optType\n    ) private {\n        CompoundBorrowPool storage _borrowPool = borrowPoolInfo[pid];\n\n        if (optType == 1) {\n            _borrowPool.curBorrow = _borrowPool.curBorrow.add(amount);\n        } else {\n            _borrowPool.curBorrow = _borrowPool.curBorrow.sub(amount);\n        }\n        _updateCompound(pid);\n    }\n\n    //must excute after Compound pool value update\n    function _updateCompound(uint256 _pid) private {\n        CompoundBorrowPool storage _borrowPool = borrowPoolInfo[_pid];\n        if (_borrowPool.lastShareBlock >= block.number) {\n            return;\n        }\n        uint256 addBowShare = _calAddBowShare(\n            _borrowPool.curBowRate,\n            _borrowPool.lastShareBlock,\n            block.number\n        );\n\n        _borrowPool.lastShareBlock = block.number;\n        _borrowPool.curBowRate = getBorrowingRate(_pid);\n        _borrowPool.globalBowShare = _borrowPool.globalBowShare.add(\n            addBowShare\n        );\n    }\n\n    function _updateRealReturnInterest(\n        uint256 _pid,\n        uint256 _interests\n    ) private {\n        if (_interests > 0) {\n            CompoundBorrowPool storage _borrowPool = borrowPoolInfo[_pid];\n            uint256 lpSupply = QuadraticFinanceToken(_borrowPool.ctoken)\n                .totalSupply();\n            if (lpSupply > 0) {\n                _borrowPool.globalLendInterestShare = _borrowPool\n                    .globalLendInterestShare\n                    .add(_interests.mul(1e12).div(lpSupply));\n            }\n        }\n    }\n\n    function _calAddBowShare(\n        uint256 _curBowRate,\n        uint256 _lastShareBlock,\n        uint256 _blockNuber\n    ) internal pure returns (uint256 addBowShare) {\n        addBowShare = _curBowRate.mul(_blockNuber.sub(_lastShareBlock)).div(\n            blockPerDay * 365\n        );\n    }\n}\n"
    },
    "contracts/lendborrow/QuadraticFinanceToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../interfaces/IQuadraticLendCompound.sol\";\n\ncontract QuadraticFinanceToken is ERC20, Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint8 private _decimals = 18;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimalsTmp\n    ) ERC20(_name, _symbol) {\n        _decimals = _decimalsTmp;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mint(address _to, uint256 _amount) external onlyOwner {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _to, uint256 _amount) external onlyOwner {\n        _burn(_to, _amount);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        IQuadraticLendCompound(owner()).doAfterLpTransfer(\n            address(this),\n            msg.sender,\n            recipient,\n            amount\n        );\n\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        IQuadraticLendCompound(owner()).doAfterLpTransfer(\n            address(this),\n            sender,\n            recipient,\n            amount\n        );\n\n        return super.transferFrom(sender, recipient, amount);\n    }\n}\n"
    },
    "contracts/lendborrow/QuadraticLendCompound.sol": {
      "content": "pragma solidity ^0.8.0;\n// SPDX-License-Identifier: SimPL-2.0\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../libraries/QuadraticStrings.sol\";\n\nimport \"./QuadraticFinanceToken.sol\";\n\nimport \"../interfaces/IQuadraticLendCompoundStorage.sol\";\nimport \"../interfaces/IQuadraticBorrowCompound.sol\";\n\ncontract QuadraticLendCompound is\n    IQuadraticLendCompoundStorage,\n    Initializable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using QuadraticStrings for string;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    event AddPoolEvent(\n        address indexed user,\n        address token,\n        uint256 allocpoint,\n        bool withUpdate\n    );\n    event UserLend(address indexed user, uint256 pid, uint256 amount);\n    event UserRedeem(\n        address indexed user,\n        uint256 pid,\n        uint256 amount,\n        uint256 interests,\n        uint256 platFormInterests\n    );\n    event DoAfterLpTransferEvent(\n        address indexed sender,\n        address recipient,\n        address spToken,\n        uint256 amount,\n        uint256 interests,\n        uint256 platFormInterests\n    );\n    event SetMaxBorrowRateEvent(\n        address indexed sender,\n        uint256 beforeRate,\n        uint256 afterRate\n    );\n    event SetAuthContractAccessEvent(\n        address indexed sender,\n        address contractAddr,\n        bool flag\n    );\n    event LoanTransferTokenEvent(\n        address indexed sender,\n        address toUser,\n        uint256 pid,\n        uint256 amount\n    );\n    event RepayTransferTokenEvent(\n        address indexed sender,\n        uint256 pid,\n        uint256 amount\n    );\n    event SettlementRepayTransferTokenEvent(\n        address indexed sender,\n        uint256 pid,\n        uint256 amount\n    );\n    event TransferToAuctionUpBorrowEvent(\n        address indexed sender,\n        uint256 pid,\n        uint256 amount\n    );\n    event SetInterestPlatformRateEvent(\n        address indexed sender,\n        uint256 beforeValue,\n        uint256 afterValue\n    );\n    event SetFunderEvent(\n        address indexed sender,\n        address beforeVal,\n        address afterVal\n    );\n    event FunderClaimEvent(address indexed sender, uint256 pid, uint256 amount);\n    event PausePoolEvent(address indexed sender, uint256 pid, bool flag);\n\n    mapping(address => mapping(uint256 => LendUserInfo)) public lendUserInfos;\n    mapping(address => uint256) public tokenOfPid;\n    mapping(address => uint256) public spTokenOfPid;\n\n    mapping(address => EnumerableSet.UintSet) private _holderLendPoolIds;\n\n    mapping(address => bool) private authSpTokenMap;\n    mapping(address => bool) public authContractAccessMap;\n    IQuadraticBorrowCompound public borrowCompound;\n\n    CompoundLendPool[] public lendPoolInfo;\n\n    address public funder;\n\n    uint256 public maxBorrowRate;\n    uint256 public interestPlatformRate;\n    mapping(uint256 => uint256) public funderPoolInterest; //pid => amount\n\n    string private constant tokenPrefix = \"SP-\";\n\n    modifier authContractAccessChecker() {\n        if (msg.sender.isContract() || tx.origin != msg.sender) {\n            require(\n                authContractAccessMap[msg.sender],\n                \"not whitelist vistor allow.\"\n            );\n        }\n        _;\n    }\n\n    modifier onlySpTokenVistor() {\n        require(authSpTokenMap[msg.sender], \"not spToken vistor allow.\");\n        _;\n    }\n\n    modifier onlyBorrowVistor() {\n        require(\n            address(borrowCompound) == msg.sender,\n            \"not borrow vistor allow.\"\n        );\n        _;\n    }\n\n    modifier onlyFunderVistor() {\n        require(funder == msg.sender, \"not funder vistor allow.\");\n        _;\n    }\n\n    function doInitialize(\n        IQuadraticBorrowCompound _borrowCompound,\n        uint256 _maxBorrowRate,\n        uint256 _interestPlatformRate\n    ) public initializer {\n        require(_maxBorrowRate < 10000, \"The maximum ratio has been exceeded.\");\n        require(\n            _interestPlatformRate < 10000,\n            \"The maximum ratio has been exceeded.\"\n        );\n       \n        borrowCompound = _borrowCompound;\n        maxBorrowRate = _maxBorrowRate;\n        interestPlatformRate = _interestPlatformRate;\n    }\n\n    function setInterestPlatformRate(\n        uint256 _interestPlatformRate\n    ) external {\n        require(\n            _interestPlatformRate < 10000,\n            \"The maximum ratio has been exceeded.\"\n        );\n        uint256 _beforeValue = interestPlatformRate;\n        interestPlatformRate = _interestPlatformRate;\n        emit SetInterestPlatformRateEvent(\n            msg.sender,\n            _beforeValue,\n            _interestPlatformRate\n        );\n    }\n\n    function setAuthContractAccess(\n        address _contractAddr,\n        bool _flag\n    ) external {\n        require(_contractAddr.isContract(), \"address is not contract address.\");\n        authContractAccessMap[_contractAddr] = _flag;\n        emit SetAuthContractAccessEvent(msg.sender, _contractAddr, _flag);\n    }\n\n    /**\n     *  _withUpdate :reserved\n     **/\n    function addPool(ERC20 _token, bool _withUpdate) public {\n        address _spToken = _createToken(\n            \"Supply-Provider Token\",\n            tokenPrefix.concat(_token.symbol()),\n            _token.decimals()\n        );\n        lendPoolInfo.push(\n            CompoundLendPool({\n                token: address(_token),\n                spToken: _spToken,\n                curSupply: 0,\n                curBorrow: 0,\n                totalRecvInterests: 0\n            })\n        );\n\n        tokenOfPid[address(_token)] = lendPoolInfo.length - 1;\n\n        spTokenOfPid[address(_spToken)] = tokenOfPid[address(_token)];\n\n        authSpTokenMap[_spToken] = true;\n\n        borrowCompound.addBorrowPool(address(_token), _spToken);\n\n        emit AddPoolEvent(msg.sender, address(_token), 0, _withUpdate);\n    }\n\n    function setMaxBorrowRate(uint256 _maxBorrowRate) public {\n        uint256 _beforeRate = maxBorrowRate;\n        maxBorrowRate = _maxBorrowRate;\n        emit SetMaxBorrowRateEvent(msg.sender, _beforeRate, maxBorrowRate);\n    }\n\n    function setFunder(address _funder) external {\n        address _beforeVal = funder;\n        funder = _funder;\n        emit SetFunderEvent(msg.sender, _beforeVal, _funder);\n    }\n\n    function funderClaim(\n        uint256 _pid,\n        uint256 _amount\n    ) external onlyFunderVistor {\n        uint256 _totalAmount = funderPoolInterest[_pid];\n        require(_totalAmount >= _amount, \"Wrong amount.\");\n        funderPoolInterest[_pid] = funderPoolInterest[_pid].sub(_amount);\n\n        borrowCompound.transferInterestToLend(_pid, funder, _amount);\n        emit FunderClaimEvent(msg.sender, _pid, _amount);\n    }\n\n    function userLend(\n        uint256 _pid,\n        uint256 _amount\n    ) public {\n        require(_amount > 0, \"lend invalid amount\");\n\n        CompoundLendPool storage _pool = lendPoolInfo[_pid];\n\n        LendUserInfo storage user = lendUserInfos[msg.sender][_pid];\n\n        uint256 _globalLendInterestShare = borrowCompound\n            .getGlobalLendInterestShare(_pid);\n\n        (uint256 _lendInterests, ) = pendingRedeemInterests(_pid, msg.sender);\n        user.unRecvInterests = _lendInterests;\n        user.lastLendInterestShare = _globalLendInterestShare;\n\n        QuadraticFinanceToken(_pool.spToken).mint(msg.sender, _amount);\n        _pool.curSupply = _pool.curSupply.add(_amount);\n\n        _updateCompound(_pid);\n\n        user.currTotalLend = user.currTotalLend.add(_amount);\n        user.userDli = user.userDli.add(_amount);\n\n        _holderLendPoolIds[msg.sender].add(_pid);\n\n        IERC20(_pool.token).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        emit UserLend(msg.sender, _pid, _amount);\n    }\n\n    function userRedeem(\n        uint256 _pid,\n        uint256 _amount\n    ) public returns (uint256) {\n        require(_amount >= 0, \"invalid amount\");\n        CompoundLendPool storage _pool = lendPoolInfo[_pid];\n\n        LendUserInfo storage user = lendUserInfos[msg.sender][_pid];\n        require(user.userDli >= _amount, \"invalid amount\");\n\n        uint256 _globalLendInterestShare = borrowCompound\n            .getGlobalLendInterestShare(_pid);\n\n        (\n            uint256 _lendInterests,\n            uint256 _platFormInterests\n        ) = pendingRedeemInterests(_pid, msg.sender);\n        uint256 _totalInterests = _lendInterests.add(_platFormInterests);\n\n        user.unRecvInterests = 0;\n        user.lastLendInterestShare = _globalLendInterestShare;\n\n        _pool.curSupply = _pool.curSupply.sub(_amount);\n        _pool.totalRecvInterests = _pool.totalRecvInterests.add(\n            _totalInterests\n        );\n\n        _updateCompound(_pid);\n\n        if (_amount > 0) {\n            user.currTotalLend = user.currTotalLend.sub(_amount);\n            user.userDli = user.userDli.sub(_amount);\n        }\n\n        if (user.userDli == 0) {\n            _holderLendPoolIds[msg.sender].remove(_pid);\n        }\n\n        if (_amount > 0) {\n            QuadraticFinanceToken(_pool.spToken).burn(msg.sender, _amount);\n            IERC20(_pool.token).safeTransfer(msg.sender, _amount);\n        }\n\n        if (_lendInterests > 0) {\n            borrowCompound.transferInterestToLend(\n                _pid,\n                msg.sender,\n                _lendInterests\n            );\n            if (_platFormInterests > 0) {\n                funderPoolInterest[_pid] = funderPoolInterest[_pid].add(\n                    _platFormInterests\n                );\n            }\n        }\n\n        emit UserRedeem(\n            msg.sender,\n            _pid,\n            _amount,\n            _lendInterests,\n            _platFormInterests\n        );\n\n        return _lendInterests;\n    }\n\n    function doAfterLpTransfer(\n        address spToken,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public onlySpTokenVistor {\n        uint256 _pid = spTokenOfPid[spToken];\n        require(amount > 0, \"invalid amount\");\n        CompoundLendPool storage _pool = lendPoolInfo[_pid];\n\n        LendUserInfo storage _senderUser = lendUserInfos[sender][_pid];\n        require(_senderUser.userDli >= amount, \"invalid amount\");\n\n        _updateCompound(_pid);\n\n        //sender\n        uint256 _globalLendInterestShare = borrowCompound\n            .getGlobalLendInterestShare(_pid);\n\n        (\n            uint256 _lendInterests,\n            uint256 _platFormInterests\n        ) = pendingRedeemInterests(_pid, sender);\n        uint256 _totalInterests = _lendInterests.add(_platFormInterests);\n\n        _senderUser.unRecvInterests = 0;\n        _senderUser.lastLendInterestShare = _globalLendInterestShare;\n\n        _pool.totalRecvInterests = _pool.totalRecvInterests.add(\n            _totalInterests\n        );\n\n        _senderUser.currTotalLend = _senderUser.currTotalLend.sub(amount);\n        _senderUser.userDli = _senderUser.userDli.sub(amount);\n\n        if (_senderUser.userDli == 0) {\n            _holderLendPoolIds[sender].remove(_pid);\n        }\n\n        // recipient\n        LendUserInfo storage _recipientUser = lendUserInfos[recipient][_pid];\n\n        (_recipientUser.unRecvInterests, ) = pendingRedeemInterests(\n            _pid,\n            recipient\n        );\n        _recipientUser.lastLendInterestShare = _globalLendInterestShare;\n\n        _recipientUser.currTotalLend = _recipientUser.currTotalLend.add(amount);\n        _recipientUser.userDli = _recipientUser.userDli.add(amount);\n\n        _holderLendPoolIds[recipient].add(_pid);\n\n        // sender is user receive Interests.\n        // sender is contract ,recipient is user ,recipient receive Interests.\n        // sender and recipient both contract, funder receive Interests.\n        if (_lendInterests > 0) {\n            if (!sender.isContract()) {\n                borrowCompound.transferInterestToLend(\n                    _pid,\n                    sender,\n                    _lendInterests\n                );\n            } else {\n                if (!recipient.isContract()) {\n                    borrowCompound.transferInterestToLend(\n                        _pid,\n                        recipient,\n                        _lendInterests\n                    );\n                } else {\n                    funderPoolInterest[_pid] = funderPoolInterest[_pid].add(\n                        _lendInterests\n                    );\n                }\n            }\n\n            if (_platFormInterests > 0) {\n                funderPoolInterest[_pid] = funderPoolInterest[_pid].add(\n                    _platFormInterests\n                );\n            }\n        }\n        emit DoAfterLpTransferEvent(\n            sender,\n            recipient,\n            spToken,\n            amount,\n            _lendInterests,\n            _platFormInterests\n        );\n    }\n\n    function loanTransferToken(\n        uint256 pid,\n        address toUser,\n        uint256 amount\n    ) external onlyBorrowVistor {\n        CompoundLendPool storage _pool = lendPoolInfo[pid];\n\n        require(_pool.curSupply >= amount, \"not enough amount borrow\");\n        _pool.curSupply = _pool.curSupply.sub(amount);\n        _pool.curBorrow = _pool.curBorrow.add(amount);\n        require(\n            _pool.curBorrow.mul(10000).div(\n                _pool.curSupply.add(_pool.curBorrow)\n            ) < maxBorrowRate,\n            \"Exceeding the maximum total lending ratio.\"\n        );\n\n        IERC20(_pool.token).safeTransfer(toUser, amount);\n\n        emit LoanTransferTokenEvent(msg.sender, toUser, pid, amount);\n    }\n\n    function repayTransferToken(\n        uint256 pid,\n        uint256 amount\n    ) external onlyBorrowVistor {\n        CompoundLendPool storage _pool = lendPoolInfo[pid];\n\n        require(_pool.curBorrow >= amount, \"current borrow amount error. \");\n        _pool.curSupply = _pool.curSupply.add(amount);\n        _pool.curBorrow = _pool.curBorrow.sub(amount);\n\n        IERC20(_pool.token).safeTransferFrom(msg.sender, address(this), amount);\n        emit RepayTransferTokenEvent(msg.sender, pid, amount);\n    }\n\n    function settlementRepayTransferToken(\n        uint256 pid,\n        uint256 amount\n    ) external onlyBorrowVistor {\n        CompoundLendPool storage _pool = lendPoolInfo[pid];\n\n        _pool.curSupply = _pool.curSupply.add(amount);\n        IERC20(_pool.token).safeTransferFrom(msg.sender, address(this), amount);\n        emit SettlementRepayTransferTokenEvent(msg.sender, pid, amount);\n    }\n\n    function transferToAuctionUpBorrow(\n        uint256 pid,\n        uint256 amount\n    ) external onlyBorrowVistor {\n        CompoundLendPool storage _pool = lendPoolInfo[pid];\n\n        _pool.curBorrow = _pool.curBorrow.sub(amount);\n        emit TransferToAuctionUpBorrowEvent(msg.sender, pid, amount);\n    }\n\n    function pendingRedeemInterests(\n        uint256 _pid,\n        address _user\n    ) public view returns (uint256 _lendInterests, uint256 _platFormInterests) {\n        LendUserInfo memory user = lendUserInfos[_user][_pid];\n\n        uint256 _globalLendInterestShare = borrowCompound\n            .getGlobalLendInterestShare(_pid);\n        _lendInterests = user\n            .userDli\n            .mul(_globalLendInterestShare.sub(user.lastLendInterestShare))\n            .div(1e12);\n        _platFormInterests = _lendInterests.mul(interestPlatformRate).div(\n            10_000\n        );\n        _lendInterests = _lendInterests.sub(_platFormInterests).add(\n            user.unRecvInterests\n        );\n    }\n\n    function getPoolLength() external view returns (uint256 poolLength) {\n        poolLength = lendPoolInfo.length;\n    }\n\n    function getLendPoolIdsOfOwner(\n        address owner\n    ) external view returns (uint256[] memory) {\n        uint256[] memory tokens = new uint256[](\n            _holderLendPoolIds[owner].length()\n        );\n        for (uint256 i = 0; i < _holderLendPoolIds[owner].length(); i++) {\n            tokens[i] = _holderLendPoolIds[owner].at(i);\n        }\n        return tokens;\n    }\n\n    function _updateCompound(uint256 pid) private {\n        borrowCompound.updateBorrowPool(pid);\n    }\n\n    function _createToken(\n        string memory _symbol,\n        string memory _name,\n        uint8 _decimals\n    ) private returns (address) {\n        bytes memory deploymentData = abi.encodePacked(\n            type(QuadraticFinanceToken).creationCode,\n            abi.encode(_symbol, _name, _decimals)\n        );\n        bytes32 _salt = keccak256(\n            abi.encodePacked(_symbol, _name, _decimals, block.timestamp)\n        );\n        address _token;\n        assembly {\n            _token := create2(\n                0x0,\n                add(deploymentData, 0x20),\n                mload(deploymentData),\n                _salt\n            )\n        }\n        require(_token != address(0), \"Create2: Failed on create SP token\");\n        return _token;\n    }\n}\n"
    },
    "contracts/libraries/QuadraticStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary QuadraticStrings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(\n        uint256 value,\n        uint256 length\n    ) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    function concat(\n        string memory a,\n        string memory b\n    ) internal pure returns (string memory) {\n        bytes memory ba = bytes(a);\n        bytes memory bb = bytes(b);\n        bytes memory bc = new bytes(ba.length + bb.length);\n\n        uint256 bal = ba.length;\n        uint256 bbl = bb.length;\n        uint256 k = 0;\n\n        for (uint256 i = 0; i != bal; ++i) {\n            bc[k++] = ba[i];\n        }\n        for (uint256 i = 0; i != bbl; ++i) {\n            bc[k++] = bb[i];\n        }\n\n        return string(bc);\n    }\n}\n"
    },
    "contracts/uniswap/IUniswapV3Oracle.sol": {
      "content": "pragma solidity ^0.8.0;\n//SPDX-License-Identifier: MIT\ninterface IUniswapV3Oracle {\n    function getNFTAmounts(\n        uint256 _tokenId\n    )\n        external\n        view\n        returns (\n            address _token0,\n            address _token1,\n            uint24 _fee,\n            uint256 _amount0,\n            uint256 _amount1\n        );\n    function getTWAPQuoteNft(\n        uint256 _tokenId,\n        address _quoteToken\n    ) external view returns (uint256 _quoteAmount, uint256 _gasEstimate);\n    // function getPoolPathByTokens(address _tokenIn,address _tokenOut) external view returns (bytes memory _path);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}