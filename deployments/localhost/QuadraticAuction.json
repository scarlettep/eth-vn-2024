{
  "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "AbortiveAuctionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beforeVal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "afterVal",
          "type": "address"
        }
      ],
      "name": "ChangeUniswapV3OracleEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "DoAuctionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidArid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBidAmount",
          "type": "uint256"
        }
      ],
      "name": "DoHarvestAuctionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FunderClaimEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "GovernanceTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reductionRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reductionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "riskFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "onePriceRatio",
          "type": "uint256"
        }
      ],
      "name": "SetActionConfigEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beforeVal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "afterVal",
          "type": "address"
        }
      ],
      "name": "SetFunderEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quadraticLiquidation",
          "type": "address"
        }
      ],
      "name": "SetQuadraticLiquidationEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beforeVal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "afterVal",
          "type": "address"
        }
      ],
      "name": "SetStreamingProcessorEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startAuctionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startAuctioInterests",
          "type": "uint256"
        }
      ],
      "name": "ToAuctionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "abortiveAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "erc721Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auctionUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startAuctionValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startAuctionInterests",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saledAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestBidPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBidAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "auctionUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auctionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "returnPay",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "mulReduce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCompound",
      "outputs": [
        {
          "internalType": "contract IQuadraticBorrowCompound",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV3Oracle",
          "type": "address"
        }
      ],
      "name": "changeUniswapV3Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "doAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "doHarvestAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IQuadraticBorrowCompound",
          "name": "_borrowCompound",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV3Oracle",
          "name": "_uniswapV3Oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reductionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reductionRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_onePriceRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_riskFactor",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_streamingProcessor",
          "type": "address"
        }
      ],
      "name": "doInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "funder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "funderClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funderPoolInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getAuctionRecordLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctioningIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBidAuctioningIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getCurrSaleInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mulReduce",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "bidFlag",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getCurrSaleInfoV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mulReduce",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "bidFlag",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "harvestFlag",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "harvestAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getHarvestAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxBidArid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBidAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBidAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getHarvestAuctionV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxBidArid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBidAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBidAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "harvestFlag",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "harvestAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHolderAuctionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBidAuctioningIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBidAuctioningInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "harvestAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "harvestFlag",
              "type": "bool"
            }
          ],
          "internalType": "struct QuadraticAuction.BidAuctionInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onePriceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quadraticLiquidation",
      "outputs": [
        {
          "internalType": "contract IQuadraticLiquidation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reductionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reductionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reductionRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reductionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_riskFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_onePriceRatio",
          "type": "uint256"
        }
      ],
      "name": "setActionConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        }
      ],
      "name": "setFunder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quadraticLiquidation",
          "type": "address"
        }
      ],
      "name": "setQuadraticLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_streamingProcessor",
          "type": "address"
        }
      ],
      "name": "setStreamingProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamingProcessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startAuctionValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startAuctionInterests",
          "type": "uint256"
        }
      ],
      "name": "toAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Oracle",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Oracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23db5c4a2242d97249144c8bbae24d5225141f0280c4063e8ad193f4a646e86d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
    "transactionIndex": 0,
    "gasUsed": "3615527",
    "logsBloom": "0x
    "blockHash": "0x6616165dbe1fb8563234856fae2f65a2e201e020bcff9cf0f46559f5b895fda9",
    "transactionHash": "0x23db5c4a2242d97249144c8bbae24d5225141f0280c4063e8ad193f4a646e86d",
    "logs": [],
    "blockNumber": 36,
    "cumulativeGasUsed": "3615527",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "098480c917844fb3229652c5950c1cfa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"AbortiveAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beforeVal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"afterVal\",\"type\":\"address\"}],\"name\":\"ChangeUniswapV3OracleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"DoAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidArid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBidAmount\",\"type\":\"uint256\"}],\"name\":\"DoHarvestAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FunderClaimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reductionRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reductionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onePriceRatio\",\"type\":\"uint256\"}],\"name\":\"SetActionConfigEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beforeVal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"afterVal\",\"type\":\"address\"}],\"name\":\"SetFunderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quadraticLiquidation\",\"type\":\"address\"}],\"name\":\"SetQuadraticLiquidationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beforeVal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"afterVal\",\"type\":\"address\"}],\"name\":\"SetStreamingProcessorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAuctionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAuctioInterests\",\"type\":\"uint256\"}],\"name\":\"ToAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"abortiveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startAuctionValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAuctionInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestBidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBidAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"auctionUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"returnPay\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mulReduce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCompound\",\"outputs\":[{\"internalType\":\"contract IQuadraticBorrowCompound\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV3Oracle\",\"type\":\"address\"}],\"name\":\"changeUniswapV3Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"doHarvestAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IQuadraticBorrowCompound\",\"name\":\"_borrowCompound\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Oracle\",\"name\":\"_uniswapV3Oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reductionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reductionRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onePriceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_streamingProcessor\",\"type\":\"address\"}],\"name\":\"doInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"funderClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderPoolInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionRecordLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctioningIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidAuctioningIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getCurrSaleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mulReduce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bidFlag\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getCurrSaleInfoV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mulReduce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bidFlag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"harvestFlag\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"harvestAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getHarvestAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBidArid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBidAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getHarvestAuctionV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBidArid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"harvestFlag\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"harvestAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderAuctionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBidAuctioningIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBidAuctioningInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"harvestAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"harvestFlag\",\"type\":\"bool\"}],\"internalType\":\"struct QuadraticAuction.BidAuctionInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onePriceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quadraticLiquidation\",\"outputs\":[{\"internalType\":\"contract IQuadraticLiquidation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reductionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reductionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reductionRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reductionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onePriceRatio\",\"type\":\"uint256\"}],\"name\":\"setActionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"setFunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quadraticLiquidation\",\"type\":\"address\"}],\"name\":\"setQuadraticLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamingProcessor\",\"type\":\"address\"}],\"name\":\"setStreamingProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamingProcessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startAuctionValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAuctionInterests\",\"type\":\"uint256\"}],\"name\":\"toAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Oracle\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auction/QuadraticAuction.sol\":\"QuadraticAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/auction/QuadraticAuction.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: SimPL-2.0\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\n\\nimport \\\"../libraries/QuadraticStrings.sol\\\";\\nimport \\\"../governance/RoleControl.sol\\\";\\n\\nimport \\\"../uniswap/IUniswapV3Oracle.sol\\\";\\nimport \\\"../interfaces/IQuadraticBorrowCompound.sol\\\";\\nimport \\\"../interfaces/IQuadraticLiquidation.sol\\\";\\n\\ncontract QuadraticAuction is\\n    RoleControl,\\n    IQuadraticBorrowCompoundStorage,\\n    Initializable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Strings for string;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct AuctionInfo {\\n        address erc721Addr;\\n        uint256 tokenId;\\n        uint256 bid;\\n        uint256 auctionStartTime;\\n        address auctionToken;\\n        address auctionUser;\\n        uint256 startAuctionValue;\\n        uint256 startAuctionInterests;\\n        uint256 saledAmount;\\n        uint256 latestBidPrice;\\n        uint state; // 0 read auction, 1 auctioning,2 auctioned\\n        uint256 totalBidAmount;\\n    }\\n\\n    struct AuctionRecord {\\n        address auctionUser;\\n        uint256 auctionAmount;\\n        uint blockTime;\\n        bool returnPay;\\n        uint256 mulReduce;\\n    }\\n\\n    struct BidAuctionInfo {\\n        uint256 auctionId;\\n        address harvestAddress;\\n        bool harvestFlag;\\n    }\\n\\n    event ToAuctionEvent(\\n        uint256 indexed bid,\\n        uint256 indexed tokenId,\\n        address erc721Addr,\\n        address auctionToken,\\n        uint256 startAuctionAmount,\\n        uint256 startAuctioInterests\\n    );\\n    event DoAuctionEvent(\\n        uint256 indexed bid,\\n        uint256 indexed tokenId,\\n        uint256 indexed auctionId,\\n        uint256 auctionAmount,\\n        address userAddr\\n    );\\n    event DoHarvestAuctionEvent(\\n        uint256 indexed bid,\\n        uint256 indexed tokenId,\\n        uint256 indexed auctionId,\\n        address userAddr,\\n        uint256 bidArid,\\n        uint256 bidAmount,\\n        uint256 totalBidAmount\\n    );\\n    event AbortiveAuctionEvent(uint256 indexed auctionId, address toAddress);\\n    event SetActionConfigEvent(\\n        address sender,\\n        uint256 reductionRatio,\\n        uint256 reductionTime,\\n        uint256 riskFactor,\\n        uint256 onePriceRatio\\n    );\\n    event SetQuadraticLiquidationEvent(\\n        address sender,\\n        address quadraticLiquidation\\n    );\\n    event SetFunderEvent(\\n        address indexed sender,\\n        address beforeVal,\\n        address afterVal\\n    );\\n    event FunderClaimEvent(\\n        address indexed sender,\\n        address token,\\n        uint256 amount\\n    );\\n    event SetStreamingProcessorEvent(\\n        address indexed sender,\\n        address beforeVal,\\n        address afterVal\\n    );\\n    event ChangeUniswapV3OracleEvent(\\n        address indexed sender,\\n        address beforeVal,\\n        address afterVal\\n    );\\n\\n    mapping(uint256 => AuctionInfo) public auctionInfos;\\n    uint256 public reductionTime = 14_400;\\n    uint256 public reductionRatio = 950;\\n    uint256 public riskFactor = 975;\\n    uint256 public onePriceRatio = 950;\\n\\n    uint256[] private auctionIds;\\n\\n    EnumerableSet.UintSet private _holderAuctioningIds;\\n    EnumerableSet.UintSet private _holderAuctionIds;\\n    EnumerableSet.UintSet private _holderBidAuctionIds;\\n    EnumerableSet.UintSet private _holderAuctionSaledIds;\\n\\n    mapping(uint256 => AuctionRecord[]) public auctionRecords;\\n\\n    address public funder;\\n    IQuadraticBorrowCompound public borrowCompound;\\n    IQuadraticLiquidation public quadraticLiquidation;\\n    IUniswapV3Oracle public uniswapV3Oracle;\\n\\n    mapping(address => uint256) public funderPoolInterest; //token => amount\\n\\n    address public streamingProcessor;\\n\\n    modifier onlyBorrowVistor() {\\n        require(\\n            address(borrowCompound) == msg.sender,\\n            \\\"not borrow vistor allow.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFunderVistor() {\\n        require(funder == msg.sender, \\\"not funder vistor allow.\\\");\\n        _;\\n    }\\n\\n    function doInitialize(\\n        IQuadraticBorrowCompound _borrowCompound,\\n        IUniswapV3Oracle _uniswapV3Oracle,\\n        uint256 _reductionTime,\\n        uint256 _reductionRatio,\\n        uint256 _onePriceRatio,\\n        uint256 _riskFactor,\\n        address _streamingProcessor\\n    ) external initializer {\\n        _governance = msg.sender;\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        borrowCompound = _borrowCompound;\\n        reductionTime = _reductionTime;\\n        riskFactor = _riskFactor;\\n        reductionRatio = _reductionRatio;\\n        uniswapV3Oracle = _uniswapV3Oracle;\\n        onePriceRatio = _onePriceRatio;\\n        streamingProcessor = _streamingProcessor;\\n    }\\n\\n    function changeUniswapV3Oracle(\\n        address _uniswapV3Oracle\\n    ) external onlyGovernance {\\n        address _beforeVal = address(uniswapV3Oracle);\\n        uniswapV3Oracle = IUniswapV3Oracle(_uniswapV3Oracle);\\n        emit ChangeUniswapV3OracleEvent(\\n            msg.sender,\\n            _beforeVal,\\n            _uniswapV3Oracle\\n        );\\n    }\\n\\n    function setActionConfig(\\n        uint256 _reductionRatio,\\n        uint256 _reductionTime,\\n        uint256 _riskFactor,\\n        uint256 _onePriceRatio\\n    ) external onlyGovernance {\\n        require(_reductionRatio < 1_000, \\\"max reductionRatio.\\\");\\n        require(_onePriceRatio < 1_000, \\\"max onePriceRatio.\\\");\\n        require(_riskFactor < 1_000, \\\"max riskFactor.\\\");\\n        reductionRatio = _reductionRatio;\\n        riskFactor = _riskFactor;\\n        onePriceRatio = _onePriceRatio;\\n\\n        if (_reductionTime > 0) {\\n            reductionTime = _reductionTime;\\n        }\\n\\n        emit SetActionConfigEvent(\\n            msg.sender,\\n            _reductionRatio,\\n            _reductionTime,\\n            _riskFactor,\\n            _onePriceRatio\\n        );\\n    }\\n\\n    function setQuadraticLiquidation(\\n        address _quadraticLiquidation\\n    ) external onlyGovernance {\\n        quadraticLiquidation = IQuadraticLiquidation(_quadraticLiquidation);\\n        emit SetQuadraticLiquidationEvent(msg.sender, _quadraticLiquidation);\\n    }\\n\\n    function setStreamingProcessor(\\n        address _streamingProcessor\\n    ) external onlyGovernance {\\n        address _beforeVal = streamingProcessor;\\n        streamingProcessor = _streamingProcessor;\\n        emit SetStreamingProcessorEvent(\\n            msg.sender,\\n            _beforeVal,\\n            _streamingProcessor\\n        );\\n    }\\n\\n    function setFunder(address _funder) external onlyGovernance {\\n        address _beforeVal = funder;\\n        funder = _funder;\\n        emit SetFunderEvent(msg.sender, _beforeVal, _funder);\\n    }\\n\\n    function funderClaim(\\n        address _token,\\n        uint256 _amount\\n    ) external onlyFunderVistor {\\n        uint256 _totalAmount = funderPoolInterest[_token];\\n        require(_totalAmount >= _amount, \\\"Wrong amount.\\\");\\n        funderPoolInterest[_token] = funderPoolInterest[_token].sub(_amount);\\n\\n        IERC20(_token).safeTransfer(funder, _amount);\\n        emit FunderClaimEvent(msg.sender, _token, _amount);\\n    }\\n\\n    function toAuction(\\n        address erc721Addr,\\n        uint256 tokenId,\\n        uint256 bid,\\n        address auctionToken,\\n        uint256 startAuctionValue,\\n        uint256 startAuctionInterests\\n    ) external onlyBorrowVistor {\\n        uint256 auctionId = auctionIds.length;\\n        auctionIds.push(auctionId);\\n        auctionInfos[auctionId] = AuctionInfo({\\n            erc721Addr: erc721Addr,\\n            tokenId: tokenId,\\n            bid: bid,\\n            auctionStartTime: block.timestamp,\\n            auctionToken: auctionToken,\\n            auctionUser: address(0),\\n            startAuctionValue: startAuctionValue,\\n            startAuctionInterests: startAuctionInterests,\\n            saledAmount: 0,\\n            latestBidPrice: 0,\\n            state: 0,\\n            totalBidAmount: 0\\n        });\\n        _holderAuctioningIds.add(auctionId);\\n        _holderAuctionIds.add(auctionId);\\n\\n        emit ToAuctionEvent(\\n            bid,\\n            tokenId,\\n            erc721Addr,\\n            auctionToken,\\n            startAuctionValue,\\n            startAuctionInterests\\n        );\\n    }\\n\\n    function doAuction(\\n        uint256 auctionId,\\n        uint256 amount\\n    ) external nonReentrant whenNotPaused {\\n        require(\\n            _holderAuctioningIds.contains(auctionId),\\n            \\\"This auction not exist.\\\"\\n        );\\n        (\\n            uint256 _auctionAmount,\\n            uint256 _onePrice,\\n            uint256 _remainTime,\\n            uint256 mulReduce,\\n            ,\\n            ,\\n\\n        ) = _getCurrSaleInfo(auctionId);\\n        require(_remainTime > 0, \\\"Over time.\\\");\\n\\n        AuctionInfo storage _auctionInfo = auctionInfos[auctionId];\\n        require(\\n            _auctionInfo.state == 0 || _auctionInfo.state == 1,\\n            \\\"This auction state error.\\\"\\n        );\\n\\n        require(\\n            amount > _auctionInfo.latestBidPrice,\\n            \\\"Must be greater than the existing maximum bid.\\\"\\n        );\\n        require(\\n            amount > _auctionAmount,\\n            \\\"Must be greater than the starting price.\\\"\\n        );\\n\\n        IERC20 _payToken = IERC20(_auctionInfo.auctionToken);\\n\\n        AuctionRecord[] storage _auctionRecords = auctionRecords[auctionId];\\n        _auctionRecords.push(\\n            AuctionRecord({\\n                auctionUser: msg.sender,\\n                auctionAmount: amount,\\n                blockTime: block.timestamp,\\n                returnPay: false,\\n                mulReduce: mulReduce\\n            })\\n        );\\n\\n        _auctionInfo.latestBidPrice = amount;\\n        _auctionInfo.state = 1;\\n        _auctionInfo.totalBidAmount = _auctionInfo.totalBidAmount.add(amount);\\n\\n        if (!_holderBidAuctionIds.contains(auctionId)) {\\n            _holderBidAuctionIds.add(auctionId);\\n        }\\n\\n        _payToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        if (_auctionRecords.length > 1) {\\n            AuctionRecord storage _returnRecord = _auctionRecords[\\n                _auctionRecords.length - 2\\n            ];\\n            if (!_returnRecord.returnPay) {\\n                _returnRecord.returnPay = true;\\n                _payToken.safeTransfer(\\n                    _returnRecord.auctionUser,\\n                    _returnRecord.auctionAmount\\n                );\\n            }\\n        }\\n\\n        if (amount >= _onePrice) {\\n            _doHarvestAuction(auctionId, true);\\n        }\\n\\n        emit DoAuctionEvent(\\n            _auctionInfo.bid,\\n            _auctionInfo.tokenId,\\n            auctionId,\\n            amount,\\n            msg.sender\\n        );\\n    }\\n    function doHarvestAuction(\\n        uint256 auctionId\\n    ) external nonReentrant whenNotPaused {\\n        _doHarvestAuction(auctionId, false);\\n    }\\n\\n    function _doHarvestAuction(uint256 auctionId, bool onePriceFlag) private {\\n        require(\\n            _holderAuctioningIds.contains(auctionId),\\n            \\\"This auction not exist.\\\"\\n        );\\n        AuctionInfo storage _auctionInfo = auctionInfos[auctionId];\\n        require(_auctionInfo.state == 1, \\\"Error auction state.\\\");\\n\\n        AuctionRecord[] memory _auctionRecords = auctionRecords[auctionId];\\n\\n        (\\n            uint256 _maxBidArid,\\n            uint256 _maxBidAmount,\\n            uint256 _totalBidAmount,\\n            bool _harvestFlag,\\n\\n        ) = _getHarvestAuction(auctionId);\\n        require(_harvestFlag || onePriceFlag, \\\"Not harverst in time.\\\");\\n\\n        AuctionRecord memory _auctionRecord = _auctionRecords[_maxBidArid];\\n        if (_auctionRecords.length > 0) {\\n            require(\\n                _auctionRecord.auctionUser == msg.sender,\\n                \\\"This auction does not belong to you.\\\"\\n            );\\n            require(\\n                _auctionRecord.returnPay == false,\\n                \\\"This auction has been refunded.\\\"\\n            );\\n\\n            IERC20 _payToken = IERC20(_auctionInfo.auctionToken);\\n            _auctionInfo.auctionUser = msg.sender;\\n            _auctionInfo.saledAmount = _auctionRecord.auctionAmount;\\n            _auctionInfo.state = 2;\\n\\n            _holderAuctioningIds.remove(auctionId);\\n            _holderBidAuctionIds.remove(auctionId);\\n            _holderAuctionSaledIds.add(auctionId);\\n\\n            BorrowInfo memory borrow = borrowCompound.borrowInfo(\\n                _auctionInfo.bid\\n            );\\n            uint256 _returnAmount = borrow.amount.add(borrow.interests);\\n\\n            if (_auctionRecord.auctionAmount > _returnAmount) {\\n                uint256 _funderAmount = _auctionRecord.auctionAmount.sub(\\n                    _returnAmount\\n                );\\n                funderPoolInterest[\\n                    _auctionInfo.auctionToken\\n                ] = funderPoolInterest[_auctionInfo.auctionToken].add(\\n                    _funderAmount\\n                );\\n            }\\n            _payToken.safeApprove(address(borrowCompound), 0);\\n            _payToken.safeApprove(address(borrowCompound), _returnAmount);\\n            borrowCompound.settlementBorrow(_auctionInfo.bid);\\n\\n            IERC721(_auctionInfo.erc721Addr).transferFrom(\\n                address(this),\\n                msg.sender,\\n                _auctionInfo.tokenId\\n            );\\n        }\\n\\n        emit DoHarvestAuctionEvent(\\n            _auctionInfo.bid,\\n            _auctionInfo.tokenId,\\n            auctionId,\\n            msg.sender,\\n            _maxBidArid,\\n            _maxBidAmount,\\n            _totalBidAmount\\n        );\\n    }\\n\\n    function abortiveAuction(\\n        uint256 auctionId\\n    ) external nonReentrant whenNotPaused {\\n        require(\\n            _holderAuctioningIds.contains(auctionId),\\n            \\\"This auction not exist.\\\"\\n        );\\n        (uint256 _auctionAmount, , , , bool _bidFlag, , ) = _getCurrSaleInfo(\\n            auctionId\\n        );\\n        require(_auctionAmount == 0, \\\"In time.\\\");\\n        require(!_bidFlag, \\\"already bid.\\\");\\n\\n        AuctionInfo storage _auctionInfo = auctionInfos[auctionId];\\n        _auctionInfo.state = 9;\\n\\n        _holderAuctioningIds.remove(auctionId);\\n        _holderBidAuctionIds.remove(auctionId);\\n        address _processor;\\n        if (address(quadraticLiquidation) == address(0)) {\\n            require(\\n                streamingProcessor != address(0),\\n                \\\"streamingProcessor address not config.\\\"\\n            );\\n            _processor = streamingProcessor;\\n            IERC721(_auctionInfo.erc721Addr).transferFrom(\\n                address(this),\\n                streamingProcessor,\\n                _auctionInfo.tokenId\\n            );\\n        } else {\\n            _processor = address(quadraticLiquidation);\\n            IERC721(_auctionInfo.erc721Addr).approve(\\n                _processor,\\n                _auctionInfo.tokenId\\n            );\\n            quadraticLiquidation.disposalNFT(\\n                _auctionInfo.bid,\\n                _auctionInfo.erc721Addr,\\n                _auctionInfo.tokenId,\\n                _auctionInfo.auctionToken\\n            );\\n        }\\n\\n        emit AbortiveAuctionEvent(auctionId, _processor);\\n    }\\n\\n    function getHolderAuctionIds() external view returns (uint256[] memory) {\\n        uint256[] memory actionIds = new uint256[](_holderAuctionIds.length());\\n        for (uint256 i = 0; i < _holderAuctionIds.length(); i++) {\\n            actionIds[i] = _holderAuctionIds.at(i);\\n        }\\n        return actionIds;\\n    }\\n\\n    function getAuctioningIds() external view returns (uint256[] memory) {\\n        uint256[] memory actionIds = new uint256[](\\n            _holderAuctioningIds.length()\\n        );\\n        for (uint256 i = 0; i < _holderAuctioningIds.length(); i++) {\\n            actionIds[i] = _holderAuctioningIds.at(i);\\n        }\\n        return actionIds;\\n    }\\n\\n    function getBidAuctioningIds() external view returns (uint256[] memory) {\\n        uint256[] memory actionIds = new uint256[](\\n            _holderBidAuctionIds.length()\\n        );\\n        for (uint256 i = 0; i < _holderBidAuctionIds.length(); i++) {\\n            actionIds[i] = _holderBidAuctionIds.at(i);\\n        }\\n        return actionIds;\\n    }\\n\\n    function getUserBidAuctioningIds(\\n        address user\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory _actionIdsTmp = new uint256[](\\n            _holderBidAuctionIds.length()\\n        );\\n        uint _length = 0;\\n        uint256 _maximum = ~uint256(0);\\n        for (uint256 i = 0; i < _holderBidAuctionIds.length(); i++) {\\n            uint256 _bidAuctionId = _holderBidAuctionIds.at(i);\\n            AuctionRecord[] memory _auctionRecords = auctionRecords[\\n                _bidAuctionId\\n            ];\\n            bool _flag = false;\\n            for (uint256 _arId = 0; _arId < _auctionRecords.length; ++_arId) {\\n                if (_auctionRecords[_arId].auctionUser == user) {\\n                    _actionIdsTmp[i] = _bidAuctionId;\\n                    _length = _length + 1;\\n                    _flag = true;\\n                    break;\\n                }\\n            }\\n\\n            if (!_flag) {\\n                _actionIdsTmp[i] = _maximum;\\n            }\\n        }\\n\\n        uint256[] memory _actionIds = new uint256[](_length);\\n        uint _k = 0;\\n        for (uint256 j = 0; j < _actionIdsTmp.length; j++) {\\n            if (_actionIdsTmp[j] != _maximum) {\\n                _actionIds[_k] = _actionIdsTmp[j];\\n                _k = _k + 1;\\n            }\\n        }\\n\\n        return _actionIds;\\n    }\\n\\n    function getUserBidAuctioningInfos(\\n        address user\\n    ) external view returns (BidAuctionInfo[] memory) {\\n        uint256[] memory _actionIds = getUserBidAuctioningIds(user);\\n        BidAuctionInfo[] memory _bidAuctionInfo = new BidAuctionInfo[](\\n            _actionIds.length\\n        );\\n        for (uint256 i = 0; i < _actionIds.length; i++) {\\n            uint256 _bidAuctionId = _actionIds[i];\\n            (\\n                ,\\n                ,\\n                ,\\n                bool _harvestFlag,\\n                address _harvestAddress\\n            ) = _getHarvestAuction(_bidAuctionId);\\n            _bidAuctionInfo[i].auctionId = _bidAuctionId;\\n            _bidAuctionInfo[i].harvestAddress = _harvestAddress;\\n            _bidAuctionInfo[i].harvestFlag = _harvestFlag;\\n        }\\n        return _bidAuctionInfo;\\n    }\\n\\n    function getCurrSaleInfo(\\n        uint256 auctionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 onePrice,\\n            uint256 remainTime,\\n            uint256 mulReduce,\\n            bool bidFlag\\n        )\\n    {\\n        (\\n            amount,\\n            onePrice,\\n            remainTime,\\n            mulReduce,\\n            bidFlag,\\n            ,\\n\\n        ) = _getCurrSaleInfo(auctionId);\\n    }\\n\\n    function getCurrSaleInfoV2(\\n        uint256 auctionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 onePrice,\\n            uint256 remainTime,\\n            uint256 mulReduce,\\n            bool bidFlag,\\n            bool harvestFlag,\\n            address harvestAddress\\n        )\\n    {\\n        (\\n            amount,\\n            onePrice,\\n            remainTime,\\n            mulReduce,\\n            bidFlag,\\n            harvestFlag,\\n            harvestAddress\\n        ) = _getCurrSaleInfo(auctionId);\\n    }\\n\\n    function getHarvestAuction(\\n        uint256 auctionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 maxBidArid,\\n            uint256 maxBidAmount,\\n            uint256 totalBidAmount\\n        )\\n    {\\n        (maxBidArid, maxBidAmount, totalBidAmount, , ) = _getHarvestAuction(\\n            auctionId\\n        );\\n    }\\n\\n    function getHarvestAuctionV2(\\n        uint256 auctionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 maxBidArid,\\n            uint256 maxBidAmount,\\n            uint256 totalBidAmount,\\n            bool harvestFlag,\\n            address harvestAddress\\n        )\\n    {\\n        (\\n            maxBidArid,\\n            maxBidAmount,\\n            totalBidAmount,\\n            harvestFlag,\\n            harvestAddress\\n        ) = _getHarvestAuction(auctionId);\\n    }\\n\\n    function getAuctionRecordLength(\\n        uint256 auctionId\\n    ) external view returns (uint256 length) {\\n        AuctionRecord[] memory _auctionRecords = auctionRecords[auctionId];\\n        length = _auctionRecords.length;\\n    }\\n\\n    function _getCurrSaleInfo(\\n        uint256 auctionId\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 onePrice,\\n            uint256 remainTime,\\n            uint256 mulReduce,\\n            bool bidFlag,\\n            bool harvestFlag,\\n            address harvestAddress\\n        )\\n    {\\n        require(\\n            _holderAuctioningIds.contains(auctionId),\\n            \\\"This auction not exist.\\\"\\n        );\\n\\n        AuctionInfo memory _auctionInfo = auctionInfos[auctionId];\\n        bidFlag = (_auctionInfo.state == 1);\\n\\n        uint256 _startValue = _auctionInfo.startAuctionValue.add(\\n            _auctionInfo.startAuctionInterests\\n        );\\n\\n        uint256 _diffTime = uint256(block.timestamp).sub(\\n            _auctionInfo.auctionStartTime\\n        );\\n        if (!bidFlag) {\\n            mulReduce = _diffTime.div(reductionTime);\\n            amount = _calAuctionPriceByRiskFactor(\\n                _auctionInfo,\\n                _startValue,\\n                mulReduce\\n            );\\n            if (amount > 0) {\\n                remainTime = reductionTime.sub(\\n                    _diffTime.sub(reductionTime.mul(mulReduce))\\n                );\\n                onePrice = _calOnePrice(amount);\\n            }\\n        } else {\\n            AuctionRecord memory _lastAuctionRecord = _getLastAuctionRecord(\\n                auctionId\\n            );\\n            require(\\n                _lastAuctionRecord.auctionUser != address(0),\\n                \\\"Auction record error.\\\"\\n            );\\n            amount = _lastAuctionRecord.auctionAmount;\\n            mulReduce = _lastAuctionRecord.mulReduce;\\n\\n            uint256 _auctionNextTime = _auctionInfo.auctionStartTime +\\n                (mulReduce + 1) *\\n                reductionTime;\\n            if (_auctionNextTime > block.timestamp) {\\n                remainTime = _auctionNextTime - _lastAuctionRecord.blockTime;\\n                onePrice = _calOnePrice(\\n                    _calAuctionPrice(_startValue, mulReduce)\\n                );\\n            } else {\\n                harvestFlag == true;\\n                harvestAddress = _lastAuctionRecord.auctionUser;\\n            }\\n        }\\n    }\\n\\n    function _calOnePrice(\\n        uint256 auctionPrice\\n    ) internal view returns (uint256 onePrice) {\\n        onePrice = auctionPrice.mul(1_000).div(onePriceRatio);\\n    }\\n\\n    function _calAuctionPriceByRiskFactor(\\n        AuctionInfo memory auctionInfo,\\n        uint256 startValue,\\n        uint256 mulReduce\\n    ) internal view returns (uint256 auctionPrice) {\\n        auctionPrice = _calAuctionPrice(startValue, mulReduce);\\n        if (auctionPrice > 0) {\\n            if (!_checkCanAuction(auctionInfo, auctionPrice)) {\\n                auctionPrice = 0;\\n            }\\n        }\\n    }\\n\\n    function _calAuctionPrice(\\n        uint256 startValue,\\n        uint256 mulReduce\\n    ) internal view returns (uint256 auctionPrice) {\\n        auctionPrice =\\n            (startValue * 1_000 * reductionRatio ** mulReduce) /\\n            (1_000 ** mulReduce) /\\n            1_000;\\n    }\\n\\n    function _checkCanAuction(\\n        AuctionInfo memory auctionInfo,\\n        uint256 auctionPrice\\n    ) internal view returns (bool _canSell) {\\n        (uint256 _nftCurrValue, ) = uniswapV3Oracle.getTWAPQuoteNft(\\n            auctionInfo.tokenId,\\n            auctionInfo.auctionToken\\n        );\\n        BorrowInfo memory _borrow = borrowCompound.borrowInfo(auctionInfo.bid);\\n\\n        uint256 _needRepay = _borrow.amount.add(_borrow.interests).mul(1_000);\\n\\n        if (\\n            _needRepay.div(auctionPrice) < riskFactor &&\\n            _needRepay.div(_nftCurrValue) < riskFactor\\n        ) {\\n            _canSell = true;\\n        }\\n    }\\n\\n    function _getLastAuctionRecord(\\n        uint256 auctionId\\n    ) internal view returns (AuctionRecord memory lastAuctionRecord) {\\n        AuctionRecord[] memory _auctionRecords = auctionRecords[auctionId];\\n        if (_auctionRecords.length > 0) {\\n            lastAuctionRecord = _auctionRecords[_auctionRecords.length - 1];\\n        }\\n    }\\n\\n    function _getHarvestAuction(\\n        uint256 auctionId\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 maxBidArid,\\n            uint256 maxBidAmount,\\n            uint256 totalBidAmount,\\n            bool harvestFlag,\\n            address harvestAddress\\n        )\\n    {\\n        AuctionInfo memory _auctionInfo = auctionInfos[auctionId];\\n        totalBidAmount = _auctionInfo.totalBidAmount;\\n        if (_auctionInfo.state == 1) {\\n            AuctionRecord[] memory _auctionRecords = auctionRecords[auctionId];\\n            if (_auctionRecords.length > 0) {\\n                maxBidArid = _auctionRecords.length - 1;\\n                AuctionRecord memory _lastAuctionRecord = _auctionRecords[\\n                    maxBidArid\\n                ];\\n                maxBidAmount = _lastAuctionRecord.auctionAmount;\\n                uint256 _auctionNextTime = _auctionInfo.auctionStartTime +\\n                    (_lastAuctionRecord.mulReduce + 1) *\\n                    reductionTime;\\n                if (_auctionNextTime < block.timestamp) {\\n                    harvestFlag = true;\\n                    harvestAddress = _lastAuctionRecord.auctionUser;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b2f3cebd3676623da1087a4a80cee66c8a755b78e57a230cc802c281f337353\",\"license\":\"SimPL-2.0\"},\"contracts/governance/Governance.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Governance {\\n    address public _governance;\\n\\n    constructor() {\\n        _governance = tx.origin;\\n    }\\n\\n    event GovernanceTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == _governance, \\\"not governance\\\");\\n        _;\\n    }\\n\\n    function setGovernance(address governance) public onlyGovernance {\\n        require(governance != address(0), \\\"new governance the zero address\\\");\\n        emit GovernanceTransferred(_governance, governance);\\n        _governance = governance;\\n    }\\n}\\n\",\"keccak256\":\"0x542745ea963f3f4a42e049e932f62a649205cedae9fdf04d6c9ee14a154a3790\",\"license\":\"MIT\"},\"contracts/governance/RoleControl.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./Governance.sol\\\";\\n\\ncontract RoleControl is Governance, Pausable, ReentrancyGuard {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _roles; // rule name => address => flag\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, msg.sender), \\\"account is missing role.\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external onlyGovernance {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external onlyGovernance {\\n        _revokeRole(role, account);\\n    }\\n\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyGovernance {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role][account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role][account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf0e36f5acb8deb950d18323b60e07fcfa2e3ef65ee749695e58f7f965a73539\",\"license\":\"MIT\"},\"contracts/interfaces/IQuadraticBorrowCompound.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: SimPL-2.0\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IQuadraticBorrowCompoundStorage.sol\\\";\\n\\ninterface IQuadraticBorrowCompound is IQuadraticBorrowCompoundStorage {\\n    function borrowPoolInfo(\\n        uint256 pid\\n    ) external view returns (CompoundBorrowPool memory borrowPool);\\n    function borrowInfo(\\n        uint256 bid\\n    ) external view returns (BorrowInfo memory borrow);\\n    function settlementBorrow(uint256 bid) external;\\n    function doAfterLpTransfer(\\n        address ctoken,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n    function updateBorrowPool(uint256 pid) external;\\n    function addBorrowPool(address borrowToken, address ctoken) external;\\n    function getGlobalLendInterestShare(\\n        uint256 pid\\n    ) external view returns (uint256 globalLendInterestShare);\\n    function transferInterestToLend(\\n        uint256 pid,\\n        address toUser,\\n        uint256 interests\\n    ) external;\\n    function getBorrowingRate(uint256 pid) external view returns (uint256);\\n    function getLendingRate(uint256 pid) external view returns (uint256);\\n    function borrowUserInfos(\\n        address user,\\n        uint256 pid\\n    ) external view returns (BorrowUserInfo memory borrowUserInfo);\\n}\\n\",\"keccak256\":\"0xd702b4cf970c9976bcb47bdce110b4a4b8e58486151c89242d088fe6af3ec24d\",\"license\":\"SimPL-2.0\"},\"contracts/interfaces/IQuadraticBorrowCompoundStorage.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: SimPL-2.0\\n\\ninterface IQuadraticBorrowCompoundStorage {\\n    struct BorrowUserInfo {\\n        uint256 currTotalBorrow;\\n    }\\n\\n    struct UserApplyRate {\\n        address apply721Address;\\n        uint256 specialMaxRate;\\n        uint256 tokenId;\\n    }\\n\\n    struct BorrowInfo {\\n        address user;\\n        uint256 pid;\\n        // uint256 borrowType;     //1.v3 nft\\n        uint256 tokenId;\\n        uint256 borrowValue;\\n        uint256 auctionValue;\\n        uint256 amount;\\n        uint256 repaidAmount;\\n        uint256 startBowShare;\\n        // uint256 borrowDay;\\n        uint256 startBlock;\\n        uint256 returnBlock;\\n        uint256 interests;\\n        uint256 state; //0.init 1.borrowing 2.return 8.settlement 9.overdue\\n    }\\n\\n    struct CompoundBorrowPool {\\n        address token;\\n        address ctoken;\\n        uint256 curBorrow;\\n        uint256 curBowRate;\\n        uint256 lastShareBlock;\\n        uint256 globalBowShare;\\n        uint256 globalLendInterestShare;\\n        uint256 totalMineInterests;\\n        uint256 overdueRate;\\n    }\\n\\n    struct Special721Info {\\n        string name;\\n        uint256 rate;\\n    }\\n}\\n\",\"keccak256\":\"0x744a1731603c5afa8721a827a373c05d209cc7a9f8a806b47dcbb0a08b2ef204\",\"license\":\"SimPL-2.0\"},\"contracts/interfaces/IQuadraticLiquidation.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: SimPL-2.0\\n\\ninterface IQuadraticLiquidation {\\n    function disposalNFT(\\n        uint256 bid,\\n        address erc721,\\n        uint256 tokenId,\\n        address targetToken\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9808a2120e82a8538eec24868074c0d4d78b24505bda323810a9b10ccfe5c8e0\",\"license\":\"SimPL-2.0\"},\"contracts/libraries/QuadraticStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary QuadraticStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function concat(\\n        string memory a,\\n        string memory b\\n    ) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        bytes memory bc = new bytes(ba.length + bb.length);\\n\\n        uint256 bal = ba.length;\\n        uint256 bbl = bb.length;\\n        uint256 k = 0;\\n\\n        for (uint256 i = 0; i != bal; ++i) {\\n            bc[k++] = ba[i];\\n        }\\n        for (uint256 i = 0; i != bbl; ++i) {\\n            bc[k++] = bb[i];\\n        }\\n\\n        return string(bc);\\n    }\\n}\\n\",\"keccak256\":\"0xccdd865e31faf454a51d953d24b344764ff949288549dc35ecbbe847c2f21352\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV3Oracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\ninterface IUniswapV3Oracle {\\n    function getNFTAmounts(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            address _token0,\\n            address _token1,\\n            uint24 _fee,\\n            uint256 _amount0,\\n            uint256 _amount1\\n        );\\n    function getTWAPQuoteNft(\\n        uint256 _tokenId,\\n        address _quoteToken\\n    ) external view returns (uint256 _quoteAmount, uint256 _gasEstimate);\\n    // function getPoolPathByTokens(address _tokenIn,address _tokenOut) external view returns (bytes memory _path);\\n}\\n\",\"keccak256\":\"0xd12dcef75f9b4608a09d8699c43d9ae2c6e025a5565c311f1797579229d8bb3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526138406005556103b66006556103cf6007556103b660085534801561002857600080fd5b506000805460ff60a01b196001600160a01b0319909116321716905560018055613e01806100576000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80637bf86e5811610146578063ac24765f116100c3578063d547741f11610087578063d547741f146106ee578063defa58ac14610701578063e1e5886214610714578063e63ab1e91461071d578063e774c85914610744578063f880df6b146107575761025e565b8063ac24765f14610640578063b0b1a98014610660578063c347545214610673578063cb88073414610686578063d0e07fcf146106995761025e565b80639a44c7e21161010a5780639a44c7e21461059a578063a87ca99f146105ba578063aa402b44146105f7578063aa891e4e146105ff578063ab033ea91461062d5761025e565b80637bf86e58146105465780637ebd4b99146105595780638456cb591461056c57806391d148541461057457806393e5b188146105875761025e565b80633f4ba83a116101df57806360e26150116101a357806360e26150146103c857806361dc3d911461040f578063642738601461042257806367bf7627146104355780636a5a3ed81461044857806372abff29146105335761025e565b80633f4ba83a1461033c578063438f251514610344578063599839151461038a57806359e088c6146103925780635c975abb146103a55761025e565b806325cda85d1161022657806325cda85d146102e75780632ad3095a146102fa5780632b5f325d146103035780632f2ff15d1461031657806339707c53146103295761025e565b8063041ae8801461026357806304c46c13146102935780630acc8cd1146102aa5780631c2f3e3d146102bf5780631d336d69146102d2575b600080fd5b601354610276906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61029c60075481565b60405190815260200161028a565b6102bd6102b836600461379e565b610760565b005b600054610276906001600160a01b031681565b6102da6107f7565b60405161028a9190613ace565b6102bd6102f536600461379e565b6108b9565b61029c60065481565b601854610276906001600160a01b031681565b6102bd610324366004613860565b61093e565b6102bd6103373660046139d9565b610976565b6102bd610d1f565b6103576103523660046139a9565b610d53565b60408051958652602086019490945292840191909152151560608301526001600160a01b0316608082015260a00161028a565b6102da610d76565b6102bd6103a036600461388f565b610e32565b6103b8600054600160a01b900460ff1690565b604051901515815260200161028a565b6103db6103d63660046139d9565b610fd3565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a00161028a565b61029c61041d3660046139a9565b61102e565b601654610276906001600160a01b031681565b6102bd6104433660046139a9565b6110d0565b6104c46104563660046139a9565b600460208190526000918252604090912080546001820154600283015460038401549484015460058501546006860154600787015460088801546009890154600a8a0154600b909a01546001600160a01b03998a169b989a979996871697959096169593949293919290918c565b604080516001600160a01b039d8e168152602081019c909c528b019990995260608a019790975294891660808901529790921660a087015260c086015260e08501526101008401949094526101208301939093526101408201929092526101608101919091526101800161028a565b6102bd6105413660046137e5565b6110f7565b6102bd61055436600461379e565b611371565b6102bd610567366004613a1d565b6113f7565b6102bd611561565b6103b8610582366004613860565b6115e0565b6102bd61059536600461379e565b61160d565b6105ad6105a836600461379e565b611693565b60405161028a9190613a6a565b6105cd6105c83660046139a9565b611832565b6040805195865260208601949094529284019190915260608301521515608082015260a00161028a565b6102da611856565b61061261060d3660046139a9565b611912565b6040805193845260208401929092529082015260600161028a565b6102bd61063b36600461379e565b61192e565b61029c61064e36600461379e565b60176020526000908152604090205481565b6102bd61066e3660046139a9565b611a09565b6102da61068136600461379e565b611d3c565b601554610276906001600160a01b031681565b6106ac6106a73660046139a9565b612068565b60408051978852602088019690965294860193909352606085019190915215156080840152151560a08301526001600160a01b031660c082015260e00161028a565b6102bd6106fc366004613860565b612093565b601454610276906001600160a01b031681565b61029c60055481565b61029c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6102bd6107523660046137ba565b6120c7565b61029c60085481565b6000546001600160a01b031633146107935760405162461bcd60e51b815260040161078a90613b70565b60405180910390fd5b601380546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f7bdd8beff7d8411e2b81e553a7f28dd1d15b287f3a02a33f26ac4e4d7a5f866091015b60405180910390a25050565b60606000610805600c612212565b67ffffffffffffffff81111561082b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610854578160200160208202803683370190505b50905060005b610864600c612212565b8110156108b357610876600c8261221c565b82828151811061089657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806108ab81613d85565b91505061085a565b50905090565b6000546001600160a01b031633146108e35760405162461bcd60e51b815260040161078a90613b70565b601580546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527fad793b20ae74e3cd792b194d757c87105444046bb189939bfb5a81bdf29bfb3c910160405180910390a150565b6000546001600160a01b031633146109685760405162461bcd60e51b815260040161078a90613b70565b610972828261222f565b5050565b61097e612298565b6109866122f2565b610991600a83612345565b6109ad5760405162461bcd60e51b815260040161078a90613b39565b6000806000806109bc8661235d565b505050935093509350935060008211610a045760405162461bcd60e51b815260206004820152600a60248201526927bb32b9103a34b6b29760b11b604482015260640161078a565b6000868152600460205260409020600a8101541580610a27575080600a01546001145b610a735760405162461bcd60e51b815260206004820152601960248201527f546869732061756374696f6e207374617465206572726f722e00000000000000604482015260640161078a565b80600901548611610add5760405162461bcd60e51b815260206004820152602e60248201527f4d7573742062652067726561746572207468616e20746865206578697374696e60448201526d339036b0bc34b6bab6903134b21760911b606482015260840161078a565b848611610b3d5760405162461bcd60e51b815260206004820152602860248201527f4d7573742062652067726561746572207468616e20746865207374617274696e6044820152673390383934b1b29760c11b606482015260840161078a565b6004818101546000898152601260209081526040808320815160a0810183523381528084018d81524293820193845260608201868152608083018b8152845460018082018755868a52979098209351600590980290930180546001600160a01b0319166001600160a01b0398891617815591518287015593516002820155925160038401805460ff1916911515919091179055519190950155600985018a9055600a850155600b84015491169190610bf590896125ad565b600b840155610c05600e8a612345565b610c1657610c14600e8a6125b9565b505b610c2b6001600160a01b03831633308b6125c5565b805460011015610cb75780546000908290610c4890600290613d42565b81548110610c6657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201600381015490915060ff16610cb55760038101805460ff19166001908117909155815490820154610cb5916001600160a01b0386811692911690612636565b505b858810610cc957610cc989600161266b565b60018301546002840154604080518b81523360208201528c9392917f8e692c4758bb040db838062e6506b267aab6d7a00e36f17b8a8d93060a83c8a4910160405180910390a45050505050505061097260018055565b6000546001600160a01b03163314610d495760405162461bcd60e51b815260040161078a90613b70565b610d51612bb7565b565b6000806000806000610d6486612c0c565b939a9299509097509550909350915050565b60606000610d84600e612212565b67ffffffffffffffff811115610daa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dd3578160200160208202803683370190505b50905060005b610de3600e612212565b8110156108b357610df5600e8261221c565b828281518110610e1557634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610e2a81613d85565b915050610dd9565b600354610100900460ff1615808015610e525750600354600160ff909116105b80610e6c5750303b158015610e6c575060035460ff166001145b610ecf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161078a565b6003805460ff191660011790558015610ef2576003805461ff0019166101001790555b600080546001600160a01b03191633908117909155610f32907f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9061222f565b601480546001600160a01b03808b166001600160a01b031992831617909255600588905560078590556006879055601680548a8416908316179055600886905560188054928516929091169190911790558015610fc9576003805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60126020528160005260406000208181548110610fef57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931695509093509160ff169085565b600081815260126020908152604080832080548251818502810185019093528083528493849084015b828210156110c35760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460ff16151560608401526004015460808301529083529092019101611057565b5050915195945050505050565b6110d8612298565b6110e06122f2565b6110eb81600061266b565b6110f460018055565b50565b6014546001600160a01b031633146111515760405162461bcd60e51b815260206004820152601860248201527f6e6f7420626f72726f7720766973746f7220616c6c6f772e0000000000000000604482015260640161078a565b600060098054905090506009819080600181540180825580915050600190039060005260206000200160009091909190915055604051806101800160405280886001600160a01b03168152602001878152602001868152602001428152602001856001600160a01b0316815260200160006001600160a01b0316815260200184815260200183815260200160008152602001600081526020016000815260200160008152506004600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015590505061130581600a6125b990919063ffffffff16565b50611311600c826125b9565b50604080516001600160a01b03808a1682528616602082015290810184905260608101839052869086907f472471c4fd3f238f16b01104ca9bd638496679256ef51a3d54301dfcf39d719f9060800160405180910390a350505050505050565b6000546001600160a01b0316331461139b5760405162461bcd60e51b815260040161078a90613b70565b601880546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f655b7b455c484a5cd7f2a4f206f7bbc4817ecf5e8e2bd28f325415099085269b91016107eb565b6000546001600160a01b031633146114215760405162461bcd60e51b815260040161078a90613b70565b6103e884106114685760405162461bcd60e51b815260206004820152601360248201527236b0bc103932b23ab1ba34b7b72930ba34b79760691b604482015260640161078a565b6103e881106114ae5760405162461bcd60e51b815260206004820152601260248201527136b0bc1037b732a83934b1b2a930ba34b79760711b604482015260640161078a565b6103e882106114f15760405162461bcd60e51b815260206004820152600f60248201526e36b0bc103934b9b5a330b1ba37b91760891b604482015260640161078a565b600684905560078290556008819055821561150c5760058390555b604080513381526020810186905290810184905260608101839052608081018290527f6d6d006b85993cd2a4570c9a72be2e0c284766ad1f1b7ad246b59b3fceccfe169060a00160405180910390a150505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61158c81336115e0565b6115d85760405162461bcd60e51b815260206004820152601860248201527f6163636f756e74206973206d697373696e6720726f6c652e0000000000000000604482015260640161078a565b6110f4612e00565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000546001600160a01b031633146116375760405162461bcd60e51b815260040161078a90613b70565b601680546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f55f88e1a470467a8151fa2efb5c4a38d5ead3df1c5a84112b8d2b428ac28e75291016107eb565b606060006116a083611d3c565b90506000815167ffffffffffffffff8111156116cc57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561171757816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816116ea5790505b50905060005b825181101561182857600083828151811061174857634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008061175e83612c0c565b945094505050508285858151811061178657634e487b7160e01b600052603260045260246000fd5b60200260200101516000018181525050808585815181106117b757634e487b7160e01b600052603260045260246000fd5b6020026020010151602001906001600160a01b031690816001600160a01b031681525050818585815181106117fc57634e487b7160e01b600052603260045260246000fd5b60200260200101516040019015159081151581525050505050808061182090613d85565b91505061171d565b509150505b919050565b60008060008060006118438661235d565b50949b939a509198509650945092505050565b60606000611864600a612212565b67ffffffffffffffff81111561188a57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156118b3578160200160208202803683370190505b50905060005b6118c3600a612212565b8110156108b3576118d5600a8261221c565b8282815181106118f557634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061190a81613d85565b9150506118b9565b600080600061192084612c0c565b509297919650945092505050565b6000546001600160a01b031633146119585760405162461bcd60e51b815260040161078a90613b70565b6001600160a01b0381166119ae5760405162461bcd60e51b815260206004820152601f60248201527f6e657720676f7665726e616e636520746865207a65726f206164647265737300604482015260640161078a565b600080546040516001600160a01b03808516939216917f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce8091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b611a11612298565b611a196122f2565b611a24600a82612345565b611a405760405162461bcd60e51b815260040161078a90613b39565b600080611a4c8361235d565b50509450505050915081600014611a905760405162461bcd60e51b815260206004820152600860248201526724b7103a34b6b29760c11b604482015260640161078a565b8015611acd5760405162461bcd60e51b815260206004820152600c60248201526b30b63932b0b23c903134b21760a11b604482015260640161078a565b60008381526004602052604090206009600a80830191909155611af09085612e43565b50611afc600e85612e43565b506015546000906001600160a01b0316611bf5576018546001600160a01b0316611b775760405162461bcd60e51b815260206004820152602660248201527f73747265616d696e6750726f636573736f722061646472657373206e6f74206360448201526537b73334b39760d11b606482015260840161078a565b50601854815460018301546040516323b872dd60e01b81523060048201526001600160a01b039384166024820181905260448201929092529092909116906323b872dd90606401600060405180830381600087803b158015611bd857600080fd5b505af1158015611bec573d6000803e3d6000fd5b50505050611cf1565b506015548154600183015460405163095ea7b360e01b81526001600160a01b0393841660048201819052602482019290925290929091169063095ea7b390604401600060405180830381600087803b158015611c5057600080fd5b505af1158015611c64573d6000803e3d6000fd5b5050601554600285015485546001870154600480890154604051634e7951fd60e11b8152918201949094526001600160a01b039283166024820152604481019190915291811660648301529091169250639cf2a3fa9150608401600060405180830381600087803b158015611cd857600080fd5b505af1158015611cec573d6000803e3d6000fd5b505050505b6040516001600160a01b038216815285907f9e8d1a7fa767a57dd6f9ac362f52ffdee77d596a922c45ecab7d6b644cc80ae29060200160405180910390a2505050506110f460018055565b60606000611d4a600e612212565b67ffffffffffffffff811115611d7057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d99578160200160208202803683370190505b5090506000600019815b611dad600e612212565b811015611f58576000611dc1600e8361221c565b9050600060126000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611e645760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460ff16151560608401526004015460808301529083529092019101611df8565b5050505090506000805b8251811015611f0e57896001600160a01b0316838281518110611ea157634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03161415611efe5783888681518110611edd57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611ef3876001613bd7565b965060019150611f0e565b611f0781613d85565b9050611e6e565b5080611f425784878581518110611f3557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050508080611f5090613d85565b915050611da3565b5060008267ffffffffffffffff811115611f8257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611fab578160200160208202803683370190505b5090506000805b855181101561205c5783868281518110611fdc57634e487b7160e01b600052603260045260246000fd5b60200260200101511461204a5785818151811061200957634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061203157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152612047826001613bd7565b91505b8061205481613d85565b915050611fb2565b50909695505050505050565b600080600080600080600061207c8861235d565b959e949d50929b5090995097509550909350915050565b6000546001600160a01b031633146120bd5760405162461bcd60e51b815260040161078a90613b70565b6109728282612e4f565b6013546001600160a01b031633146121215760405162461bcd60e51b815260206004820152601860248201527f6e6f742066756e64657220766973746f7220616c6c6f772e0000000000000000604482015260640161078a565b6001600160a01b0382166000908152601760205260409020548181101561217a5760405162461bcd60e51b815260206004820152600d60248201526c2bb937b7339030b6b7bab73a1760991b604482015260640161078a565b6001600160a01b03831660009081526017602052604090205461219d9083612eb6565b6001600160a01b038085166000818152601760205260409020929092556013546121c992911684612636565b604080516001600160a01b03851681526020810184905233917f88fd3316c9095ab540fae8d4fb866de4ccab13f341b36e0867279463658c6734910160405180910390a2505050565b6000611607825490565b60006122288383612ec2565b9392505050565b61223982826115e0565b6109725760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600260015414156122eb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161078a565b6002600155565b612305600054600160a01b900460ff1690565b15610d515760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161078a565b60008181526001830160205260408120541515612228565b6000808080808080612370600a89612345565b61238c5760405162461bcd60e51b815260040161078a90613b39565b600088815260046020818152604080842081516101808101835281546001600160a01b03908116825260018084015495830195909552600283015493820193909352600382015460608201529381015482166080850152600581015490911660a0840152600681015460c08401819052600782015460e0850181905260088301546101008601526009830154610120860152600a8301546101408601819052600b9093015461016086015291909214965091929161244a91906125ad565b90506000612465836060015142612eb690919063ffffffff16565b9050856124cd5760055461247a908290612efa565b9650612487838389612f06565b995089156124c8576124ba6124b16124aa89600554612f3290919063ffffffff16565b8390612eb6565b60055490612eb6565b97506124c58a612f3e565b98505b61259f565b60006124d88c612f5a565b80519091506001600160a01b031661252a5760405162461bcd60e51b815260206004820152601560248201527420bab1ba34b7b7103932b1b7b9321032b93937b91760591b604482015260640161078a565b80602001519a5080608001519750600060055489600161254a9190613bd7565b6125549190613d23565b85606001516125639190613bd7565b90504281111561259757604082015161257c9082613d42565b995061259061258b858b61307d565b612f3e565b9a5061259c565b815195505b50505b505050919395979092949650565b60006122288284613bd7565b600061222883836130c4565b6040516001600160a01b03808516602483015283166044820152606481018290526126309085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613113565b50505050565b6040516001600160a01b03831660248201526044810182905261266690849063a9059cbb60e01b906064016125f9565b505050565b612676600a83612345565b6126925760405162461bcd60e51b815260040161078a90613b39565b6000828152600460205260409020600a8101546001146126eb5760405162461bcd60e51b815260206004820152601460248201527322b93937b91030bab1ba34b7b71039ba30ba329760611b604482015260640161078a565b600083815260126020908152604080832080548251818502810185019093528083529192909190849084015b828210156127835760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460ff16151560608401526004015460808301529083529092019101612717565b50505050905060008060008061279888612c0c565b50935093509350935080806127aa5750865b6127ee5760405162461bcd60e51b81526020600482015260156024820152742737ba103430b93b32b939ba1034b7103a34b6b29760591b604482015260640161078a565b600085858151811061281057634e487b7160e01b600052603260045260246000fd5b60200260200101519050600086511115612b565780516001600160a01b031633146128895760405162461bcd60e51b8152602060048201526024808201527f546869732061756374696f6e20646f6573206e6f742062656c6f6e6720746f206044820152633cb7ba9760e11b606482015260840161078a565b6060810151156128db5760405162461bcd60e51b815260206004820152601f60248201527f546869732061756374696f6e20686173206265656e20726566756e6465642e00604482015260640161078a565b60048701546005880180546001600160a01b03191633179055602082015160088901556002600a808a01919091556001600160a01b039091169061291f908b612e43565b5061292b600e8b612e43565b5061293760108b6125b9565b506014546002890154604051633e9f152d60e11b815260048101919091526000916001600160a01b031690637d3e2a5a906024016101806040518083038186803b15801561298457600080fd5b505afa158015612998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bc9190613900565b905060006129dc8261014001518360a001516125ad90919063ffffffff16565b90508084602001511115612a455760208401516000906129fc9083612eb6565b60048c01546001600160a01b0316600090815260176020526040902054909150612a2690826125ad565b60048c01546001600160a01b0316600090815260176020526040902055505b601454612a60906001600160a01b03858116911660006131e8565b601454612a7a906001600160a01b038581169116836131e8565b60145460028b0154604051637254392560e01b81526001600160a01b0390921691637254392591612ab19160040190815260200190565b600060405180830381600087803b158015612acb57600080fd5b505af1158015612adf573d6000803e3d6000fd5b50508b5460018d01546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b0390911692506323b872dd9150606401600060405180830381600087803b158015612b3a57600080fd5b505af1158015612b4e573d6000803e3d6000fd5b505050505050505b600187015460028801546040805133815260208101899052908101879052606081018690528b9291907f6dc7c6ceb56285b1f69eec06994036d187577f0a553ffe82b772c8f8d67e026c9060800160405180910390a4505050505050505050565b612bbf61330c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081815260046020818152604080842081516101808101835281546001600160a01b03908116825260018084015495830195909552600283015493820193909352600382015460608201529381015482166080850152600581015490911660a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a8101546101408401819052600b9091015461016084018190528493909284928392911415612df657600087815260126020908152604080832080548251818502810185019093528083529192909190849084015b82821015612d5c5760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460ff16151560608401526004015460808301529083529092019101612cf0565b505050509050600081511115612df45760018151612d7a9190613d42565b96506000818881518110612d9e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905080602001519650600060055482608001516001612dc59190613bd7565b612dcf9190613d23565b8460600151612dde9190613bd7565b905042811015612df15781516001965094505b50505b505b5091939590929450565b612e086122f2565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612bef3390565b60006122288383613362565b612e5982826115e0565b156109725760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006122288284613d42565b6000826000018281548110612ee757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006122288284613bef565b6000612f12838361307d565b9050801561222857612f24848261347f565b612228575060009392505050565b60006122288284613d23565b60085460009061160790612f54846103e8612f32565b90612efa565b612f976040518060a0016040528060006001600160a01b031681526020016000815260200160008152602001600015158152602001600081525090565b600082815260126020908152604080832080548251818502810185019093528083529192909190849084015b8282101561302f5760008481526020908190206040805160a0810182526005860290920180546001600160a01b0316835260018082015484860152600282015492840192909252600381015460ff16151560608401526004015460808301529083529092019101612fc3565b50505050905060008151111561307757806001825161304e9190613d42565b8151811061306c57634e487b7160e01b600052603260045260246000fd5b602002602001015191505b50919050565b60006103e861308c8382613c55565b8360065461309a9190613c55565b6130a6866103e8613d23565b6130b09190613d23565b6130ba9190613bef565b6122289190613bef565b600081815260018301602052604081205461310b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611607565b506000611607565b6000613168826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166136069092919063ffffffff16565b90508051600014806131895750808060200190518101906131899190613840565b6126665760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161078a565b8015806132715750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561323757600080fd5b505afa15801561324b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326f91906139c1565b155b6132dc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161078a565b6040516001600160a01b03831660248201526044810182905261266690849063095ea7b360e01b906064016125f9565b61331f600054600160a01b900460ff1690565b610d515760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161078a565b60008181526001830160205260408120548015613475576000613386600183613d42565b855490915060009061339a90600190613d42565b905081811461341b5760008660000182815481106133c857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106133f957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061343a57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611607565b6000915050611607565b601654602083015160808401516040516304bd838960e41b815260048101929092526001600160a01b0390811660248301526000928392911690634bd8389090604401604080518083038186803b1580156134d957600080fd5b505afa1580156134ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351191906139fa565b506014546040808701519051633e9f152d60e11b81529293506000926001600160a01b0390921691637d3e2a5a9161354f9160040190815260200190565b6101806040518083038186803b15801561356857600080fd5b505afa15801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a09190613900565b905060006135cc6103e86135c68461014001518560a001516125ad90919063ffffffff16565b90612f32565b6007549091506135dc8287612efa565b1080156135f357506007546135f18285612efa565b105b156135fd57600193505b50505092915050565b6060613615848460008561361d565b949350505050565b60608247101561367e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161078a565b600080866001600160a01b0316858760405161369a9190613a4e565b60006040518083038185875af1925050503d80600081146136d7576040519150601f19603f3d011682016040523d82523d6000602084013e6136dc565b606091505b50915091506136ed878383876136f8565b979650505050505050565b6060831561376457825161375d576001600160a01b0385163b61375d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161078a565b5081613615565b61361583838151156137795781518083602001fd5b8060405162461bcd60e51b815260040161078a9190613b06565b805161182d81613db6565b6000602082840312156137af578081fd5b813561222881613db6565b600080604083850312156137cc578081fd5b82356137d781613db6565b946020939093013593505050565b60008060008060008060c087890312156137fd578182fd5b863561380881613db6565b95506020870135945060408701359350606087013561382681613db6565b9598949750929560808101359460a0909101359350915050565b600060208284031215613851578081fd5b81518015158114612228578182fd5b60008060408385031215613872578182fd5b82359150602083013561388481613db6565b809150509250929050565b600080600080600080600060e0888a0312156138a9578081fd5b87356138b481613db6565b965060208801356138c481613db6565b955060408801359450606088013593506080880135925060a0880135915060c08801356138f081613db6565b8091505092959891949750929550565b6000610180808385031215613913578182fd5b61391c81613b98565b905061392783613793565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b6000602082840312156139ba578081fd5b5035919050565b6000602082840312156139d2578081fd5b5051919050565b600080604083850312156139eb578182fd5b50508035926020909101359150565b60008060408385031215613a0c578182fd5b505080516020909101519092909150565b60008060008060808587031215613a32578182fd5b5050823594602084013594506040840135936060013592509050565b60008251613a60818460208701613d59565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015613ac157815180518552868101516001600160a01b03168786015285015115158585015260609093019290850190600101613a87565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561205c57835183529284019291840191600101613aea565b6000602082528251806020840152613b25816040850160208701613d59565b601f01601f19169190910160400192915050565b60208082526017908201527f546869732061756374696f6e206e6f742065786973742e000000000000000000604082015260600190565b6020808252600e908201526d6e6f7420676f7665726e616e636560901b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613bcf57634e487b7160e01b600052604160045260246000fd5b604052919050565b60008219821115613bea57613bea613da0565b500190565b600082613c0a57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613c215750613c4c565b818704821115613c3357613c33613da0565b80861615613c4057918102915b9490941c938002613c12565b94509492505050565b60006122286000198484600082613c6e57506001612228565b81613c7b57506000612228565b8160018114613c915760028114613c9b57613cc8565b6001915050612228565b60ff841115613cac57613cac613da0565b6001841b915084821115613cc257613cc2613da0565b50612228565b5060208310610133831016604e8410600b8410161715613cfb575081810a83811115613cf657613cf6613da0565b612228565b613d088484846001613c0f565b808604821115613d1a57613d1a613da0565b02949350505050565b6000816000190483118215151615613d3d57613d3d613da0565b500290565b600082821015613d5457613d54613da0565b500390565b60005b83811015613d74578181015183820152602001613d5c565b838111156126305750506000910152565b6000600019821415613d9957613d99613da0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146110f457600080fdfea2646970667358221220e2fbe884f8194eaa4150f831a493c910d32e38c84dc946ca78a112c518ff13f664736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10032,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1056,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1157,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10127,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 876,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 879,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_initializing",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 8041,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "auctionInfos",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(AuctionInfo)7920_storage)"
      },
      {
        "astId": 8044,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "reductionTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8047,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "reductionRatio",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8050,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "riskFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8053,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "onePriceRatio",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8056,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "auctionIds",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8059,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_holderAuctioningIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(UintSet)7160_storage"
      },
      {
        "astId": 8062,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_holderAuctionIds",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(UintSet)7160_storage"
      },
      {
        "astId": 8065,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_holderBidAuctionIds",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(UintSet)7160_storage"
      },
      {
        "astId": 8068,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "_holderAuctionSaledIds",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(UintSet)7160_storage"
      },
      {
        "astId": 8074,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "auctionRecords",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_struct(AuctionRecord)7931_storage)dyn_storage)"
      },
      {
        "astId": 8076,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "funder",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 8079,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "borrowCompound",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IQuadraticBorrowCompound)10381"
      },
      {
        "astId": 8082,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "quadraticLiquidation",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IQuadraticLiquidation)10585"
      },
      {
        "astId": 8085,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "uniswapV3Oracle",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IUniswapV3Oracle)15491"
      },
      {
        "astId": 8089,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "funderPoolInterest",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8091,
        "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
        "label": "streamingProcessor",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AuctionRecord)7931_storage)dyn_storage": {
        "base": "t_struct(AuctionRecord)7931_storage",
        "encoding": "dynamic_array",
        "label": "struct QuadraticAuction.AuctionRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IQuadraticBorrowCompound)10381": {
        "encoding": "inplace",
        "label": "contract IQuadraticBorrowCompound",
        "numberOfBytes": "20"
      },
      "t_contract(IQuadraticLiquidation)10585": {
        "encoding": "inplace",
        "label": "contract IQuadraticLiquidation",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Oracle)15491": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Oracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(AuctionRecord)7931_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuadraticAuction.AuctionRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AuctionRecord)7931_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(AuctionInfo)7920_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuadraticAuction.AuctionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionInfo)7920_storage"
      },
      "t_struct(AuctionInfo)7920_storage": {
        "encoding": "inplace",
        "label": "struct QuadraticAuction.AuctionInfo",
        "members": [
          {
            "astId": 7897,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "erc721Addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7899,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7901,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "bid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7903,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "auctionStartTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7905,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "auctionToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7907,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "auctionUser",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7909,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "startAuctionValue",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7911,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "startAuctionInterests",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7913,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "saledAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7915,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "latestBidPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 7917,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "state",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 7919,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "totalBidAmount",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(AuctionRecord)7931_storage": {
        "encoding": "inplace",
        "label": "struct QuadraticAuction.AuctionRecord",
        "members": [
          {
            "astId": 7922,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "auctionUser",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7924,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "auctionAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7926,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "blockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7928,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "returnPay",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7930,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "mulReduce",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)6688_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6683,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6687,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7160_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 7159,
            "contract": "contracts/auction/QuadraticAuction.sol:QuadraticAuction",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6688_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}